-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity crypto_aead_encrypt_h_crypto_aead_encrypt_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    c_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    c_ce0 : OUT STD_LOGIC;
    c_we0 : OUT STD_LOGIC;
    c_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    clen : OUT STD_LOGIC_VECTOR (63 downto 0);
    clen_ap_vld : OUT STD_LOGIC;
    m_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    m_ce0 : OUT STD_LOGIC;
    m_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    mlen : IN STD_LOGIC_VECTOR (63 downto 0);
    ad_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    ad_ce0 : OUT STD_LOGIC;
    ad_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    adlen : IN STD_LOGIC_VECTOR (63 downto 0);
    npub_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    npub_ce0 : OUT STD_LOGIC;
    npub_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    k_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    k_ce0 : OUT STD_LOGIC;
    k_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    st_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    st_ce0 : OUT STD_LOGIC;
    st_we0 : OUT STD_LOGIC;
    st_d0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of crypto_aead_encrypt_h_crypto_aead_encrypt_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (102 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (102 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (102 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (102 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (102 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (102 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (102 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (102 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (102 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (102 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (102 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv8_F0 : STD_LOGIC_VECTOR (7 downto 0) := "11110000";
    constant ap_const_lv8_E1 : STD_LOGIC_VECTOR (7 downto 0) := "11100001";
    constant ap_const_lv8_D2 : STD_LOGIC_VECTOR (7 downto 0) := "11010010";
    constant ap_const_lv8_C3 : STD_LOGIC_VECTOR (7 downto 0) := "11000011";
    constant ap_const_lv8_B4 : STD_LOGIC_VECTOR (7 downto 0) := "10110100";
    constant ap_const_lv8_A5 : STD_LOGIC_VECTOR (7 downto 0) := "10100101";
    constant ap_const_lv8_96 : STD_LOGIC_VECTOR (7 downto 0) := "10010110";
    constant ap_const_lv8_87 : STD_LOGIC_VECTOR (7 downto 0) := "10000111";
    constant ap_const_lv8_78 : STD_LOGIC_VECTOR (7 downto 0) := "01111000";
    constant ap_const_lv8_69 : STD_LOGIC_VECTOR (7 downto 0) := "01101001";
    constant ap_const_lv8_5A : STD_LOGIC_VECTOR (7 downto 0) := "01011010";
    constant ap_const_lv8_4B : STD_LOGIC_VECTOR (7 downto 0) := "01001011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_80400C0600000000 : STD_LOGIC_VECTOR (63 downto 0) := "1000000001000000000011000000011000000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv61_0 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_FFFFFFFFFFFFFFF8 : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv58_0 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_38 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111000";
    constant ap_const_lv64_80 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv6_38 : STD_LOGIC_VECTOR (5 downto 0) := "111000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (102 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal s_addr_reg_776 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_LOADBYTES_1_fu_300_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal K0_reg_782 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal s_addr_3_reg_789 : STD_LOGIC_VECTOR (2 downto 0);
    signal s_addr_1_reg_794 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal K1_reg_800 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal s_addr_2_reg_806 : STD_LOGIC_VECTOR (2 downto 0);
    signal s_addr_4_reg_812 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal empty_fu_389_p1 : STD_LOGIC_VECTOR (60 downto 0);
    signal empty_13_fu_393_p1 : STD_LOGIC_VECTOR (60 downto 0);
    signal empty_13_reg_837 : STD_LOGIC_VECTOR (60 downto 0);
    signal icmp_ln75_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_reg_842 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_reg_846 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln77_1_fu_458_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln77_1_reg_867 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal icmp_ln77_1_fu_449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln88_fu_515_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln88_reg_872 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln104_fu_569_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln104_reg_877 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal trunc_ln104_1_fu_603_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln104_1_reg_901 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal icmp_ln104_1_fu_597_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln117_fu_638_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln117_reg_906 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln117_1_fu_643_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln117_1_reg_911 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_378_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_reg_917 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal add_ln28_1_fu_658_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal xor_ln117_fu_732_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln117_reg_930 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal s_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_load_3_reg_935 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal s_ce0 : STD_LOGIC;
    signal s_we0 : STD_LOGIC;
    signal s_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal s_ce1 : STD_LOGIC;
    signal s_we1 : STD_LOGIC;
    signal s_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_LOADBYTES_1_fu_300_ap_start : STD_LOGIC;
    signal grp_LOADBYTES_1_fu_300_ap_done : STD_LOGIC;
    signal grp_LOADBYTES_1_fu_300_ap_idle : STD_LOGIC;
    signal grp_LOADBYTES_1_fu_300_ap_ready : STD_LOGIC;
    signal grp_LOADBYTES_1_fu_300_k_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_LOADBYTES_1_fu_300_k_ce0 : STD_LOGIC;
    signal grp_LOADBYTES_1_fu_300_bytes : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_LOADBYTES_1_fu_308_ap_start : STD_LOGIC;
    signal grp_LOADBYTES_1_fu_308_ap_done : STD_LOGIC;
    signal grp_LOADBYTES_1_fu_308_ap_idle : STD_LOGIC;
    signal grp_LOADBYTES_1_fu_308_ap_ready : STD_LOGIC;
    signal grp_LOADBYTES_1_fu_308_k_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_LOADBYTES_1_fu_308_k_ce0 : STD_LOGIC;
    signal grp_LOADBYTES_1_fu_308_bytes : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_LOADBYTES_1_fu_308_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_ROUND_fu_320_ap_start : STD_LOGIC;
    signal grp_ROUND_fu_320_ap_done : STD_LOGIC;
    signal grp_ROUND_fu_320_ap_idle : STD_LOGIC;
    signal grp_ROUND_fu_320_ap_ready : STD_LOGIC;
    signal grp_ROUND_fu_320_s_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_ROUND_fu_320_s_ce0 : STD_LOGIC;
    signal grp_ROUND_fu_320_s_we0 : STD_LOGIC;
    signal grp_ROUND_fu_320_s_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_ROUND_fu_320_s_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_ROUND_fu_320_s_ce1 : STD_LOGIC;
    signal grp_ROUND_fu_320_s_we1 : STD_LOGIC;
    signal grp_ROUND_fu_320_s_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_ROUND_fu_320_C : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_LOADBYTES_2_fu_338_ap_start : STD_LOGIC;
    signal grp_LOADBYTES_2_fu_338_ap_done : STD_LOGIC;
    signal grp_LOADBYTES_2_fu_338_ap_idle : STD_LOGIC;
    signal grp_LOADBYTES_2_fu_338_ap_ready : STD_LOGIC;
    signal grp_LOADBYTES_2_fu_338_ad_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_LOADBYTES_2_fu_338_ad_ce0 : STD_LOGIC;
    signal grp_LOADBYTES_2_fu_338_ad_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_LOADBYTES_2_fu_338_bytes : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_LOADBYTES_2_fu_338_n : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_LOADBYTES_2_fu_338_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_ap_start : STD_LOGIC;
    signal grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_ap_done : STD_LOGIC;
    signal grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_ap_idle : STD_LOGIC;
    signal grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_ap_ready : STD_LOGIC;
    signal grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_c_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_c_ce0 : STD_LOGIC;
    signal grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_c_we0 : STD_LOGIC;
    signal grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_c_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_ap_start : STD_LOGIC;
    signal grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_ap_done : STD_LOGIC;
    signal grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_ap_idle : STD_LOGIC;
    signal grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_ap_ready : STD_LOGIC;
    signal grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_s_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_s_ce0 : STD_LOGIC;
    signal grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_st_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_st_ce0 : STD_LOGIC;
    signal grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_st_we0 : STD_LOGIC;
    signal grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_st_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln_fu_494_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ad_addr_0_lcssa_idx_reg_245 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln77_1_fu_506_p3 : STD_LOGIC_VECTOR (60 downto 0);
    signal ap_phi_mux_adlen_addr_0_lcssa_phi_fu_260_p4 : STD_LOGIC_VECTOR (60 downto 0);
    signal adlen_addr_0_lcssa_reg_257 : STD_LOGIC_VECTOR (60 downto 0);
    signal and_ln104_1_fu_629_p3 : STD_LOGIC_VECTOR (60 downto 0);
    signal ap_phi_mux_mlen_addr_0_lcssa_phi_fu_270_p4 : STD_LOGIC_VECTOR (60 downto 0);
    signal mlen_addr_0_lcssa_reg_267 : STD_LOGIC_VECTOR (60 downto 0);
    signal and_ln1_fu_617_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_m_addr_0_lcssa_idx_phi_fu_281_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal m_addr_0_lcssa_idx_reg_277 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_289 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln28_fu_652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_LOADBYTES_1_fu_300_ap_start_reg : STD_LOGIC := '0';
    signal grp_LOADBYTES_1_fu_308_ap_start_reg : STD_LOGIC := '0';
    signal grp_ROUND_fu_320_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal ap_CS_fsm_state90 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal ap_CS_fsm_state96 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state96 : signal is "none";
    signal ap_CS_fsm_state98 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state98 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal ap_CS_fsm_state91 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state91 : signal is "none";
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal ap_CS_fsm_state99 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state99 : signal is "none";
    signal grp_LOADBYTES_2_fu_338_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_ap_start_reg : STD_LOGIC := '0';
    signal grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state102 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state102 : signal is "none";
    signal ap_CS_fsm_state103 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state103 : signal is "none";
    signal zext_ln28_3_fu_706_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ad_assign_fu_146 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln84_fu_463_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal adlen_assign_fu_150 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln85_fu_469_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_assign_fu_154 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln113_fu_711_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mlen_assign_fu_158 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln114_fu_717_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state2_on_subcall_done : BOOLEAN;
    signal ap_block_state4_on_subcall_done : BOOLEAN;
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal grp_fu_366_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_372_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln89_fu_546_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal xor_ln97_fu_553_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln119_fu_758_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal xor_ln127_fu_765_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln128_fu_770_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state100 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state100 : signal is "none";
    signal ap_CS_fsm_state101 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state101 : signal is "none";
    signal trunc_ln28_1_fu_691_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_410_p4 : STD_LOGIC_VECTOR (60 downto 0);
    signal tmp_7_fu_439_p4 : STD_LOGIC_VECTOR (60 downto 0);
    signal tmp_4_fu_485_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln77_fu_503_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_fu_520_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln89_fu_528_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln89_fu_534_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln89_1_fu_540_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_560_p4 : STD_LOGIC_VECTOR (60 downto 0);
    signal tmp_9_fu_587_p4 : STD_LOGIC_VECTOR (60 downto 0);
    signal tmp_6_fu_608_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln104_fu_626_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln28_fu_664_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln1_fu_668_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln28_fu_676_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln28_2_fu_682_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln28_fu_686_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_fu_648_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln104_2_fu_696_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln28_fu_700_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln2_fu_738_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln119_fu_746_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln119_fu_752_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (102 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_block_state57_on_subcall_done : BOOLEAN;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal ap_ST_fsm_state67_blk : STD_LOGIC;
    signal ap_ST_fsm_state68_blk : STD_LOGIC;
    signal ap_ST_fsm_state69_blk : STD_LOGIC;
    signal ap_ST_fsm_state70_blk : STD_LOGIC;
    signal ap_ST_fsm_state71_blk : STD_LOGIC;
    signal ap_ST_fsm_state72_blk : STD_LOGIC;
    signal ap_ST_fsm_state73_blk : STD_LOGIC;
    signal ap_ST_fsm_state74_blk : STD_LOGIC;
    signal ap_ST_fsm_state75_blk : STD_LOGIC;
    signal ap_ST_fsm_state76_blk : STD_LOGIC;
    signal ap_block_state77_on_subcall_done : BOOLEAN;
    signal ap_ST_fsm_state77_blk : STD_LOGIC;
    signal ap_ST_fsm_state78_blk : STD_LOGIC;
    signal ap_ST_fsm_state79_blk : STD_LOGIC;
    signal ap_ST_fsm_state80_blk : STD_LOGIC;
    signal ap_ST_fsm_state81_blk : STD_LOGIC;
    signal ap_ST_fsm_state82_blk : STD_LOGIC;
    signal ap_ST_fsm_state83_blk : STD_LOGIC;
    signal ap_ST_fsm_state84_blk : STD_LOGIC;
    signal ap_ST_fsm_state85_blk : STD_LOGIC;
    signal ap_ST_fsm_state86_blk : STD_LOGIC;
    signal ap_ST_fsm_state87_blk : STD_LOGIC;
    signal ap_ST_fsm_state88_blk : STD_LOGIC;
    signal ap_ST_fsm_state89_blk : STD_LOGIC;
    signal ap_ST_fsm_state90_blk : STD_LOGIC;
    signal ap_ST_fsm_state91_blk : STD_LOGIC;
    signal ap_ST_fsm_state92_blk : STD_LOGIC;
    signal ap_ST_fsm_state93_blk : STD_LOGIC;
    signal ap_ST_fsm_state94_blk : STD_LOGIC;
    signal ap_ST_fsm_state95_blk : STD_LOGIC;
    signal ap_ST_fsm_state96_blk : STD_LOGIC;
    signal ap_ST_fsm_state97_blk : STD_LOGIC;
    signal ap_ST_fsm_state98_blk : STD_LOGIC;
    signal ap_ST_fsm_state99_blk : STD_LOGIC;
    signal ap_ST_fsm_state100_blk : STD_LOGIC;
    signal ap_ST_fsm_state101_blk : STD_LOGIC;
    signal ap_ST_fsm_state102_blk : STD_LOGIC;
    signal ap_ST_fsm_state103_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component crypto_aead_encrypt_h_LOADBYTES_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        k_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        k_ce0 : OUT STD_LOGIC;
        k_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        bytes : IN STD_LOGIC_VECTOR (3 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component crypto_aead_encrypt_h_ROUND IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        s_ce0 : OUT STD_LOGIC;
        s_we0 : OUT STD_LOGIC;
        s_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        s_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        s_ce1 : OUT STD_LOGIC;
        s_we1 : OUT STD_LOGIC;
        s_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        C : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component crypto_aead_encrypt_h_LOADBYTES_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ad_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        ad_ce0 : OUT STD_LOGIC;
        ad_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        bytes : IN STD_LOGIC_VECTOR (4 downto 0);
        n : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component crypto_aead_encrypt_h_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        n_assign : IN STD_LOGIC_VECTOR (31 downto 0);
        xor_ln117 : IN STD_LOGIC_VECTOR (63 downto 0);
        m_addr_0_lcssa_idx : IN STD_LOGIC_VECTOR (5 downto 0);
        c_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        c_ce0 : OUT STD_LOGIC;
        c_we0 : OUT STD_LOGIC;
        c_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component crypto_aead_encrypt_h_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        s_ce0 : OUT STD_LOGIC;
        s_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        st_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        st_ce0 : OUT STD_LOGIC;
        st_we0 : OUT STD_LOGIC;
        st_d0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component crypto_aead_encrypt_h_crypto_aead_encrypt_1_s_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    s_U : component crypto_aead_encrypt_h_crypto_aead_encrypt_1_s_RAM_AUTO_1R1W
    generic map (
        DataWidth => 64,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => s_address0,
        ce0 => s_ce0,
        we0 => s_we0,
        d0 => s_d0,
        q0 => s_q0,
        address1 => s_address1,
        ce1 => s_ce1,
        we1 => s_we1,
        d1 => s_d1,
        q1 => s_q1);

    grp_LOADBYTES_1_fu_300 : component crypto_aead_encrypt_h_LOADBYTES_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_LOADBYTES_1_fu_300_ap_start,
        ap_done => grp_LOADBYTES_1_fu_300_ap_done,
        ap_idle => grp_LOADBYTES_1_fu_300_ap_idle,
        ap_ready => grp_LOADBYTES_1_fu_300_ap_ready,
        k_address0 => grp_LOADBYTES_1_fu_300_k_address0,
        k_ce0 => grp_LOADBYTES_1_fu_300_k_ce0,
        k_q0 => k_q0,
        bytes => grp_LOADBYTES_1_fu_300_bytes,
        ap_return => grp_LOADBYTES_1_fu_300_ap_return);

    grp_LOADBYTES_1_fu_308 : component crypto_aead_encrypt_h_LOADBYTES_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_LOADBYTES_1_fu_308_ap_start,
        ap_done => grp_LOADBYTES_1_fu_308_ap_done,
        ap_idle => grp_LOADBYTES_1_fu_308_ap_idle,
        ap_ready => grp_LOADBYTES_1_fu_308_ap_ready,
        k_address0 => grp_LOADBYTES_1_fu_308_k_address0,
        k_ce0 => grp_LOADBYTES_1_fu_308_k_ce0,
        k_q0 => npub_q0,
        bytes => grp_LOADBYTES_1_fu_308_bytes,
        ap_return => grp_LOADBYTES_1_fu_308_ap_return);

    grp_ROUND_fu_320 : component crypto_aead_encrypt_h_ROUND
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_ROUND_fu_320_ap_start,
        ap_done => grp_ROUND_fu_320_ap_done,
        ap_idle => grp_ROUND_fu_320_ap_idle,
        ap_ready => grp_ROUND_fu_320_ap_ready,
        s_address0 => grp_ROUND_fu_320_s_address0,
        s_ce0 => grp_ROUND_fu_320_s_ce0,
        s_we0 => grp_ROUND_fu_320_s_we0,
        s_d0 => grp_ROUND_fu_320_s_d0,
        s_q0 => s_q0,
        s_address1 => grp_ROUND_fu_320_s_address1,
        s_ce1 => grp_ROUND_fu_320_s_ce1,
        s_we1 => grp_ROUND_fu_320_s_we1,
        s_d1 => grp_ROUND_fu_320_s_d1,
        s_q1 => s_q1,
        C => grp_ROUND_fu_320_C);

    grp_LOADBYTES_2_fu_338 : component crypto_aead_encrypt_h_LOADBYTES_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_LOADBYTES_2_fu_338_ap_start,
        ap_done => grp_LOADBYTES_2_fu_338_ap_done,
        ap_idle => grp_LOADBYTES_2_fu_338_ap_idle,
        ap_ready => grp_LOADBYTES_2_fu_338_ap_ready,
        ad_address0 => grp_LOADBYTES_2_fu_338_ad_address0,
        ad_ce0 => grp_LOADBYTES_2_fu_338_ad_ce0,
        ad_q0 => grp_LOADBYTES_2_fu_338_ad_q0,
        bytes => grp_LOADBYTES_2_fu_338_bytes,
        n => grp_LOADBYTES_2_fu_338_n,
        ap_return => grp_LOADBYTES_2_fu_338_ap_return);

    grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349 : component crypto_aead_encrypt_h_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_ap_start,
        ap_done => grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_ap_done,
        ap_idle => grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_ap_idle,
        ap_ready => grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_ap_ready,
        n_assign => trunc_ln117_1_reg_911,
        xor_ln117 => xor_ln117_reg_930,
        m_addr_0_lcssa_idx => m_addr_0_lcssa_idx_reg_277,
        c_address0 => grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_c_address0,
        c_ce0 => grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_c_ce0,
        c_we0 => grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_c_we0,
        c_d0 => grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_c_d0);

    grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359 : component crypto_aead_encrypt_h_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_ap_start,
        ap_done => grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_ap_done,
        ap_idle => grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_ap_idle,
        ap_ready => grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_ap_ready,
        s_address0 => grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_s_address0,
        s_ce0 => grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_s_ce0,
        s_q0 => s_q0,
        st_address0 => grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_st_address0,
        st_ce0 => grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_st_ce0,
        st_we0 => grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_st_we0,
        st_d0 => grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_st_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_LOADBYTES_1_fu_300_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_LOADBYTES_1_fu_300_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
                    grp_LOADBYTES_1_fu_300_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_LOADBYTES_1_fu_300_ap_ready = ap_const_logic_1)) then 
                    grp_LOADBYTES_1_fu_300_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_LOADBYTES_1_fu_308_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_LOADBYTES_1_fu_308_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
                    grp_LOADBYTES_1_fu_308_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_LOADBYTES_1_fu_308_ap_ready = ap_const_logic_1)) then 
                    grp_LOADBYTES_1_fu_308_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_LOADBYTES_2_fu_338_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_LOADBYTES_2_fu_338_ap_start_reg <= ap_const_logic_0;
            else
                if ((((icmp_ln104_1_fu_597_p2 = ap_const_lv1_0) and (icmp_ln104_reg_877 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state60)) or ((ap_const_logic_1 = ap_CS_fsm_state60) and ((icmp_ln104_1_fu_597_p2 = ap_const_lv1_1) or (icmp_ln104_reg_877 = ap_const_lv1_1))) or ((icmp_ln77_1_fu_449_p2 = ap_const_lv1_0) and (icmp_ln77_reg_846 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((ap_const_logic_1 = ap_CS_fsm_state31) and ((icmp_ln77_1_fu_449_p2 = ap_const_lv1_1) or (icmp_ln77_reg_846 = ap_const_lv1_1))))) then 
                    grp_LOADBYTES_2_fu_338_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_LOADBYTES_2_fu_338_ap_ready = ap_const_logic_1)) then 
                    grp_LOADBYTES_2_fu_338_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_ROUND_fu_320_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_ROUND_fu_320_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((icmp_ln28_fu_652_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state62)))) then 
                    grp_ROUND_fu_320_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ROUND_fu_320_ap_ready = ap_const_logic_1)) then 
                    grp_ROUND_fu_320_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
                    grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_ap_ready = ap_const_logic_1)) then 
                    grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
                    grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_ap_ready = ap_const_logic_1)) then 
                    grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ad_addr_0_lcssa_idx_reg_245_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln77_fu_420_p2 = ap_const_lv1_1) and (icmp_ln75_fu_404_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
                ad_addr_0_lcssa_idx_reg_245(3) <= '0';
                ad_addr_0_lcssa_idx_reg_245(4) <= '0';
            elsif (((icmp_ln77_1_fu_449_p2 = ap_const_lv1_1) and (icmp_ln77_reg_846 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
                                ad_addr_0_lcssa_idx_reg_245(4 downto 3) <= and_ln_fu_494_p3(4 downto 3);
            end if; 
        end if;
    end process;

    ad_assign_fu_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln77_fu_420_p2 = ap_const_lv1_0) and (icmp_ln75_fu_404_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
                ad_assign_fu_146 <= ap_const_lv64_0;
            elsif (((icmp_ln77_1_fu_449_p2 = ap_const_lv1_0) and (icmp_ln77_reg_846 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
                ad_assign_fu_146 <= add_ln84_fu_463_p2;
            end if; 
        end if;
    end process;

    adlen_addr_0_lcssa_reg_257_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln77_fu_420_p2 = ap_const_lv1_1) and (icmp_ln75_fu_404_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
                adlen_addr_0_lcssa_reg_257 <= empty_fu_389_p1;
            elsif (((icmp_ln77_1_fu_449_p2 = ap_const_lv1_1) and (icmp_ln77_reg_846 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
                adlen_addr_0_lcssa_reg_257 <= and_ln77_1_fu_506_p3;
            end if; 
        end if;
    end process;

    adlen_assign_fu_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln77_fu_420_p2 = ap_const_lv1_0) and (icmp_ln75_fu_404_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
                adlen_assign_fu_150 <= adlen;
            elsif (((icmp_ln77_1_fu_449_p2 = ap_const_lv1_0) and (icmp_ln77_reg_846 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
                adlen_assign_fu_150 <= add_ln85_fu_469_p2;
            end if; 
        end if;
    end process;

    i_reg_289_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_LOADBYTES_2_fu_338_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state61))) then 
                i_reg_289 <= ap_const_lv4_0;
            elsif (((icmp_ln28_fu_652_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state62))) then 
                i_reg_289 <= add_ln28_1_fu_658_p2;
            end if; 
        end if;
    end process;

    m_addr_0_lcssa_idx_reg_277_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln104_fu_569_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state59))) then 
                m_addr_0_lcssa_idx_reg_277(3) <= '0';
                m_addr_0_lcssa_idx_reg_277(4) <= '0';
                m_addr_0_lcssa_idx_reg_277(5) <= '0';
            elsif (((icmp_ln104_1_fu_597_p2 = ap_const_lv1_1) and (icmp_ln104_reg_877 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state60))) then 
                                m_addr_0_lcssa_idx_reg_277(5 downto 3) <= and_ln1_fu_617_p3(5 downto 3);
            end if; 
        end if;
    end process;

    m_assign_fu_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln104_fu_569_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state59))) then 
                m_assign_fu_154 <= ap_const_lv64_0;
            elsif (((icmp_ln28_fu_652_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state62))) then 
                m_assign_fu_154 <= add_ln113_fu_711_p2;
            end if; 
        end if;
    end process;

    mlen_addr_0_lcssa_reg_267_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln104_fu_569_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state59))) then 
                mlen_addr_0_lcssa_reg_267 <= empty_13_reg_837;
            elsif (((icmp_ln104_1_fu_597_p2 = ap_const_lv1_1) and (icmp_ln104_reg_877 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state60))) then 
                mlen_addr_0_lcssa_reg_267 <= and_ln104_1_fu_629_p3;
            end if; 
        end if;
    end process;

    mlen_assign_fu_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln104_fu_569_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state59))) then 
                mlen_assign_fu_158 <= mlen;
            elsif (((icmp_ln28_fu_652_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state62))) then 
                mlen_assign_fu_158 <= add_ln114_fu_717_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                K0_reg_782 <= grp_LOADBYTES_1_fu_300_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                K1_reg_800 <= grp_LOADBYTES_1_fu_300_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                empty_13_reg_837 <= empty_13_fu_393_p1;
                icmp_ln75_reg_842 <= icmp_ln75_fu_404_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state59)) then
                icmp_ln104_reg_877 <= icmp_ln104_fu_569_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln75_fu_404_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                icmp_ln77_reg_846 <= icmp_ln77_fu_420_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state74)) then
                s_load_3_reg_935 <= s_q1;
                xor_ln117_reg_930 <= xor_ln117_fu_732_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln104_1_fu_597_p2 = ap_const_lv1_0) and (icmp_ln104_reg_877 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state60))) then
                trunc_ln104_1_reg_901 <= trunc_ln104_1_fu_603_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state60) and ((icmp_ln104_1_fu_597_p2 = ap_const_lv1_1) or (icmp_ln104_reg_877 = ap_const_lv1_1)))) then
                trunc_ln117_1_reg_911 <= trunc_ln117_1_fu_643_p1;
                    trunc_ln117_reg_906(4 downto 3) <= trunc_ln117_fu_638_p1(4 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln77_1_fu_449_p2 = ap_const_lv1_0) and (icmp_ln77_reg_846 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                trunc_ln77_1_reg_867 <= trunc_ln77_1_fu_458_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state31) and ((icmp_ln77_1_fu_449_p2 = ap_const_lv1_1) or (icmp_ln77_reg_846 = ap_const_lv1_1)))) then
                trunc_ln88_reg_872 <= trunc_ln88_fu_515_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state61)) then
                xor_ln105_reg_917 <= grp_fu_378_p2;
            end if;
        end if;
    end process;
    trunc_ln117_reg_906(2 downto 0) <= "000";
    ad_addr_0_lcssa_idx_reg_245(2 downto 0) <= "000";
    m_addr_0_lcssa_idx_reg_277(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state30, icmp_ln75_fu_404_p2, icmp_ln77_reg_846, ap_CS_fsm_state31, icmp_ln77_1_fu_449_p2, icmp_ln104_reg_877, ap_CS_fsm_state60, icmp_ln104_1_fu_597_p2, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state74, grp_ROUND_fu_320_ap_done, grp_LOADBYTES_2_fu_338_ap_done, grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_ap_done, icmp_ln28_fu_652_p2, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state47, ap_CS_fsm_state49, ap_CS_fsm_state51, ap_CS_fsm_state53, ap_CS_fsm_state55, ap_CS_fsm_state57, ap_CS_fsm_state63, ap_CS_fsm_state65, ap_CS_fsm_state67, ap_CS_fsm_state69, ap_CS_fsm_state71, ap_CS_fsm_state73, ap_CS_fsm_state77, ap_CS_fsm_state79, ap_CS_fsm_state81, ap_CS_fsm_state83, ap_CS_fsm_state85, ap_CS_fsm_state87, ap_CS_fsm_state89, ap_CS_fsm_state91, ap_CS_fsm_state93, ap_CS_fsm_state95, ap_CS_fsm_state97, ap_CS_fsm_state99, ap_CS_fsm_state32, ap_CS_fsm_state45, ap_CS_fsm_state103, ap_block_state2_on_subcall_done, ap_block_state4_on_subcall_done, ap_block_state57_on_subcall_done, ap_block_state77_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_ROUND_fu_320_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((grp_ROUND_fu_320_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((grp_ROUND_fu_320_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((grp_ROUND_fu_320_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((grp_ROUND_fu_320_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((grp_ROUND_fu_320_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((grp_ROUND_fu_320_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((grp_ROUND_fu_320_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if (((grp_ROUND_fu_320_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if (((grp_ROUND_fu_320_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                if (((grp_ROUND_fu_320_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                if (((grp_ROUND_fu_320_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                if (((icmp_ln75_fu_404_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state57;
                end if;
            when ap_ST_fsm_state31 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state31) and ((icmp_ln77_1_fu_449_p2 = ap_const_lv1_1) or (icmp_ln77_reg_846 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state32 => 
                if (((grp_LOADBYTES_2_fu_338_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                if (((grp_ROUND_fu_320_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                if (((grp_ROUND_fu_320_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                if (((grp_ROUND_fu_320_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                if (((grp_ROUND_fu_320_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                if (((grp_ROUND_fu_320_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                if (((grp_ROUND_fu_320_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state45 => 
                if (((grp_LOADBYTES_2_fu_338_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                if (((grp_ROUND_fu_320_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                if (((grp_ROUND_fu_320_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                if (((grp_ROUND_fu_320_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                if (((grp_ROUND_fu_320_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state53;
                end if;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                if (((grp_ROUND_fu_320_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state55))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_state55;
                end if;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state57) and (ap_const_boolean_0 = ap_block_state57_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state58;
                else
                    ap_NS_fsm <= ap_ST_fsm_state57;
                end if;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state60) and ((icmp_ln104_1_fu_597_p2 = ap_const_lv1_1) or (icmp_ln104_reg_877 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state74;
                else
                    ap_NS_fsm <= ap_ST_fsm_state61;
                end if;
            when ap_ST_fsm_state61 => 
                if (((grp_LOADBYTES_2_fu_338_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state61))) then
                    ap_NS_fsm <= ap_ST_fsm_state62;
                else
                    ap_NS_fsm <= ap_ST_fsm_state61;
                end if;
            when ap_ST_fsm_state62 => 
                if (((icmp_ln28_fu_652_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state62))) then
                    ap_NS_fsm <= ap_ST_fsm_state62;
                else
                    ap_NS_fsm <= ap_ST_fsm_state63;
                end if;
            when ap_ST_fsm_state63 => 
                if (((grp_ROUND_fu_320_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state63))) then
                    ap_NS_fsm <= ap_ST_fsm_state64;
                else
                    ap_NS_fsm <= ap_ST_fsm_state63;
                end if;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                if (((grp_ROUND_fu_320_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state65))) then
                    ap_NS_fsm <= ap_ST_fsm_state66;
                else
                    ap_NS_fsm <= ap_ST_fsm_state65;
                end if;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                if (((grp_ROUND_fu_320_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state67))) then
                    ap_NS_fsm <= ap_ST_fsm_state68;
                else
                    ap_NS_fsm <= ap_ST_fsm_state67;
                end if;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                if (((grp_ROUND_fu_320_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state69))) then
                    ap_NS_fsm <= ap_ST_fsm_state70;
                else
                    ap_NS_fsm <= ap_ST_fsm_state69;
                end if;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                if (((grp_ROUND_fu_320_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state71))) then
                    ap_NS_fsm <= ap_ST_fsm_state72;
                else
                    ap_NS_fsm <= ap_ST_fsm_state71;
                end if;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                if (((grp_ROUND_fu_320_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state73))) then
                    ap_NS_fsm <= ap_ST_fsm_state60;
                else
                    ap_NS_fsm <= ap_ST_fsm_state73;
                end if;
            when ap_ST_fsm_state74 => 
                if (((grp_LOADBYTES_2_fu_338_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state74))) then
                    ap_NS_fsm <= ap_ST_fsm_state75;
                else
                    ap_NS_fsm <= ap_ST_fsm_state74;
                end if;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state77) and (ap_const_boolean_0 = ap_block_state77_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state78;
                else
                    ap_NS_fsm <= ap_ST_fsm_state77;
                end if;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                if (((grp_ROUND_fu_320_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state79))) then
                    ap_NS_fsm <= ap_ST_fsm_state80;
                else
                    ap_NS_fsm <= ap_ST_fsm_state79;
                end if;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                if (((grp_ROUND_fu_320_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state81))) then
                    ap_NS_fsm <= ap_ST_fsm_state82;
                else
                    ap_NS_fsm <= ap_ST_fsm_state81;
                end if;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                if (((grp_ROUND_fu_320_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state83))) then
                    ap_NS_fsm <= ap_ST_fsm_state84;
                else
                    ap_NS_fsm <= ap_ST_fsm_state83;
                end if;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                if (((grp_ROUND_fu_320_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state85))) then
                    ap_NS_fsm <= ap_ST_fsm_state86;
                else
                    ap_NS_fsm <= ap_ST_fsm_state85;
                end if;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                if (((grp_ROUND_fu_320_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state87))) then
                    ap_NS_fsm <= ap_ST_fsm_state88;
                else
                    ap_NS_fsm <= ap_ST_fsm_state87;
                end if;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                if (((grp_ROUND_fu_320_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state89))) then
                    ap_NS_fsm <= ap_ST_fsm_state90;
                else
                    ap_NS_fsm <= ap_ST_fsm_state89;
                end if;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                if (((grp_ROUND_fu_320_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state91))) then
                    ap_NS_fsm <= ap_ST_fsm_state92;
                else
                    ap_NS_fsm <= ap_ST_fsm_state91;
                end if;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                if (((grp_ROUND_fu_320_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state93))) then
                    ap_NS_fsm <= ap_ST_fsm_state94;
                else
                    ap_NS_fsm <= ap_ST_fsm_state93;
                end if;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                if (((grp_ROUND_fu_320_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state95))) then
                    ap_NS_fsm <= ap_ST_fsm_state96;
                else
                    ap_NS_fsm <= ap_ST_fsm_state95;
                end if;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                if (((grp_ROUND_fu_320_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state97))) then
                    ap_NS_fsm <= ap_ST_fsm_state98;
                else
                    ap_NS_fsm <= ap_ST_fsm_state97;
                end if;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                if (((grp_ROUND_fu_320_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state99))) then
                    ap_NS_fsm <= ap_ST_fsm_state100;
                else
                    ap_NS_fsm <= ap_ST_fsm_state99;
                end if;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                if (((grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state103))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state103;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ad_address0 <= grp_LOADBYTES_2_fu_338_ad_address0;

    ad_ce0_assign_proc : process(grp_LOADBYTES_2_fu_338_ad_ce0, ap_CS_fsm_state32, ap_CS_fsm_state45)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            ad_ce0 <= grp_LOADBYTES_2_fu_338_ad_ce0;
        else 
            ad_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln113_fu_711_p2 <= std_logic_vector(unsigned(m_assign_fu_154) + unsigned(ap_const_lv64_8));
    add_ln114_fu_717_p2 <= std_logic_vector(unsigned(mlen_assign_fu_158) + unsigned(ap_const_lv64_FFFFFFFFFFFFFFF8));
    add_ln28_1_fu_658_p2 <= std_logic_vector(unsigned(i_reg_289) + unsigned(ap_const_lv4_1));
    add_ln28_fu_700_p2 <= std_logic_vector(unsigned(zext_ln28_fu_648_p1) + unsigned(trunc_ln104_2_fu_696_p1));
    add_ln84_fu_463_p2 <= std_logic_vector(unsigned(ad_assign_fu_146) + unsigned(ap_const_lv64_8));
    add_ln85_fu_469_p2 <= std_logic_vector(unsigned(adlen_assign_fu_150) + unsigned(ap_const_lv64_FFFFFFFFFFFFFFF8));
    and_ln104_1_fu_629_p3 <= (ap_const_lv58_0 & trunc_ln104_fu_626_p1);
    and_ln1_fu_617_p3 <= (tmp_6_fu_608_p4 & ap_const_lv3_0);
    and_ln77_1_fu_506_p3 <= (ap_const_lv58_0 & trunc_ln77_fu_503_p1);
    and_ln_fu_494_p3 <= (tmp_4_fu_485_p4 & ap_const_lv3_0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state100 <= ap_CS_fsm(99);
    ap_CS_fsm_state101 <= ap_CS_fsm(100);
    ap_CS_fsm_state102 <= ap_CS_fsm(101);
    ap_CS_fsm_state103 <= ap_CS_fsm(102);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state83 <= ap_CS_fsm(82);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state85 <= ap_CS_fsm(84);
    ap_CS_fsm_state86 <= ap_CS_fsm(85);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state88 <= ap_CS_fsm(87);
    ap_CS_fsm_state89 <= ap_CS_fsm(88);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_CS_fsm_state90 <= ap_CS_fsm(89);
    ap_CS_fsm_state91 <= ap_CS_fsm(90);
    ap_CS_fsm_state92 <= ap_CS_fsm(91);
    ap_CS_fsm_state93 <= ap_CS_fsm(92);
    ap_CS_fsm_state94 <= ap_CS_fsm(93);
    ap_CS_fsm_state95 <= ap_CS_fsm(94);
    ap_CS_fsm_state96 <= ap_CS_fsm(95);
    ap_CS_fsm_state97 <= ap_CS_fsm(96);
    ap_CS_fsm_state98 <= ap_CS_fsm(97);
    ap_CS_fsm_state99 <= ap_CS_fsm(98);
    ap_ST_fsm_state100_blk <= ap_const_logic_0;
    ap_ST_fsm_state101_blk <= ap_const_logic_0;
    ap_ST_fsm_state102_blk <= ap_const_logic_0;

    ap_ST_fsm_state103_blk_assign_proc : process(grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_ap_done)
    begin
        if ((grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state103_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state103_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state10_blk_assign_proc : process(grp_ROUND_fu_320_ap_done)
    begin
        if ((grp_ROUND_fu_320_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state11_blk <= ap_const_logic_0;

    ap_ST_fsm_state12_blk_assign_proc : process(grp_ROUND_fu_320_ap_done)
    begin
        if ((grp_ROUND_fu_320_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state12_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state12_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state13_blk <= ap_const_logic_0;

    ap_ST_fsm_state14_blk_assign_proc : process(grp_ROUND_fu_320_ap_done)
    begin
        if ((grp_ROUND_fu_320_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state14_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state14_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state15_blk <= ap_const_logic_0;

    ap_ST_fsm_state16_blk_assign_proc : process(grp_ROUND_fu_320_ap_done)
    begin
        if ((grp_ROUND_fu_320_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state16_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state16_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state17_blk <= ap_const_logic_0;

    ap_ST_fsm_state18_blk_assign_proc : process(grp_ROUND_fu_320_ap_done)
    begin
        if ((grp_ROUND_fu_320_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state18_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state18_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state20_blk_assign_proc : process(grp_ROUND_fu_320_ap_done)
    begin
        if ((grp_ROUND_fu_320_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state20_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state20_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state21_blk <= ap_const_logic_0;

    ap_ST_fsm_state22_blk_assign_proc : process(grp_ROUND_fu_320_ap_done)
    begin
        if ((grp_ROUND_fu_320_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state22_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state22_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state23_blk <= ap_const_logic_0;

    ap_ST_fsm_state24_blk_assign_proc : process(grp_ROUND_fu_320_ap_done)
    begin
        if ((grp_ROUND_fu_320_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state24_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state24_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state25_blk <= ap_const_logic_0;

    ap_ST_fsm_state26_blk_assign_proc : process(grp_ROUND_fu_320_ap_done)
    begin
        if ((grp_ROUND_fu_320_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state26_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state26_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state27_blk <= ap_const_logic_0;

    ap_ST_fsm_state28_blk_assign_proc : process(grp_ROUND_fu_320_ap_done)
    begin
        if ((grp_ROUND_fu_320_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state28_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state28_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state29_blk <= ap_const_logic_0;

    ap_ST_fsm_state2_blk_assign_proc : process(ap_block_state2_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state2_on_subcall_done)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;

    ap_ST_fsm_state32_blk_assign_proc : process(grp_LOADBYTES_2_fu_338_ap_done)
    begin
        if ((grp_LOADBYTES_2_fu_338_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state32_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state32_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state33_blk <= ap_const_logic_0;

    ap_ST_fsm_state34_blk_assign_proc : process(grp_ROUND_fu_320_ap_done)
    begin
        if ((grp_ROUND_fu_320_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state34_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state34_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state35_blk <= ap_const_logic_0;

    ap_ST_fsm_state36_blk_assign_proc : process(grp_ROUND_fu_320_ap_done)
    begin
        if ((grp_ROUND_fu_320_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state36_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state36_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state37_blk <= ap_const_logic_0;

    ap_ST_fsm_state38_blk_assign_proc : process(grp_ROUND_fu_320_ap_done)
    begin
        if ((grp_ROUND_fu_320_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state38_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state38_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state40_blk_assign_proc : process(grp_ROUND_fu_320_ap_done)
    begin
        if ((grp_ROUND_fu_320_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state40_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state40_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state41_blk <= ap_const_logic_0;

    ap_ST_fsm_state42_blk_assign_proc : process(grp_ROUND_fu_320_ap_done)
    begin
        if ((grp_ROUND_fu_320_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state42_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state42_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state43_blk <= ap_const_logic_0;

    ap_ST_fsm_state44_blk_assign_proc : process(grp_ROUND_fu_320_ap_done)
    begin
        if ((grp_ROUND_fu_320_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state44_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state44_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state45_blk_assign_proc : process(grp_LOADBYTES_2_fu_338_ap_done)
    begin
        if ((grp_LOADBYTES_2_fu_338_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state45_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state45_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state46_blk <= ap_const_logic_0;

    ap_ST_fsm_state47_blk_assign_proc : process(grp_ROUND_fu_320_ap_done)
    begin
        if ((grp_ROUND_fu_320_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state47_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state47_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state48_blk <= ap_const_logic_0;

    ap_ST_fsm_state49_blk_assign_proc : process(grp_ROUND_fu_320_ap_done)
    begin
        if ((grp_ROUND_fu_320_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state49_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state49_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(ap_block_state4_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state4_on_subcall_done)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state50_blk <= ap_const_logic_0;

    ap_ST_fsm_state51_blk_assign_proc : process(grp_ROUND_fu_320_ap_done)
    begin
        if ((grp_ROUND_fu_320_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state51_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state51_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state52_blk <= ap_const_logic_0;

    ap_ST_fsm_state53_blk_assign_proc : process(grp_ROUND_fu_320_ap_done)
    begin
        if ((grp_ROUND_fu_320_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state53_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state53_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state54_blk <= ap_const_logic_0;

    ap_ST_fsm_state55_blk_assign_proc : process(grp_ROUND_fu_320_ap_done)
    begin
        if ((grp_ROUND_fu_320_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state55_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state55_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state56_blk <= ap_const_logic_0;

    ap_ST_fsm_state57_blk_assign_proc : process(ap_block_state57_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state57_on_subcall_done)) then 
            ap_ST_fsm_state57_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state57_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state60_blk <= ap_const_logic_0;

    ap_ST_fsm_state61_blk_assign_proc : process(grp_LOADBYTES_2_fu_338_ap_done)
    begin
        if ((grp_LOADBYTES_2_fu_338_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state61_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state61_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state62_blk <= ap_const_logic_0;

    ap_ST_fsm_state63_blk_assign_proc : process(grp_ROUND_fu_320_ap_done)
    begin
        if ((grp_ROUND_fu_320_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state63_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state63_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state64_blk <= ap_const_logic_0;

    ap_ST_fsm_state65_blk_assign_proc : process(grp_ROUND_fu_320_ap_done)
    begin
        if ((grp_ROUND_fu_320_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state65_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state65_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state66_blk <= ap_const_logic_0;

    ap_ST_fsm_state67_blk_assign_proc : process(grp_ROUND_fu_320_ap_done)
    begin
        if ((grp_ROUND_fu_320_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state67_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state67_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state68_blk <= ap_const_logic_0;

    ap_ST_fsm_state69_blk_assign_proc : process(grp_ROUND_fu_320_ap_done)
    begin
        if ((grp_ROUND_fu_320_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state69_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state69_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state6_blk_assign_proc : process(grp_ROUND_fu_320_ap_done)
    begin
        if ((grp_ROUND_fu_320_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state70_blk <= ap_const_logic_0;

    ap_ST_fsm_state71_blk_assign_proc : process(grp_ROUND_fu_320_ap_done)
    begin
        if ((grp_ROUND_fu_320_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state71_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state71_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state72_blk <= ap_const_logic_0;

    ap_ST_fsm_state73_blk_assign_proc : process(grp_ROUND_fu_320_ap_done)
    begin
        if ((grp_ROUND_fu_320_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state73_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state73_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state74_blk_assign_proc : process(grp_LOADBYTES_2_fu_338_ap_done)
    begin
        if ((grp_LOADBYTES_2_fu_338_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state74_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state74_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state75_blk <= ap_const_logic_0;
    ap_ST_fsm_state76_blk <= ap_const_logic_0;

    ap_ST_fsm_state77_blk_assign_proc : process(ap_block_state77_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state77_on_subcall_done)) then 
            ap_ST_fsm_state77_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state77_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state78_blk <= ap_const_logic_0;

    ap_ST_fsm_state79_blk_assign_proc : process(grp_ROUND_fu_320_ap_done)
    begin
        if ((grp_ROUND_fu_320_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state79_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state79_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state80_blk <= ap_const_logic_0;

    ap_ST_fsm_state81_blk_assign_proc : process(grp_ROUND_fu_320_ap_done)
    begin
        if ((grp_ROUND_fu_320_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state81_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state81_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state82_blk <= ap_const_logic_0;

    ap_ST_fsm_state83_blk_assign_proc : process(grp_ROUND_fu_320_ap_done)
    begin
        if ((grp_ROUND_fu_320_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state83_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state83_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state84_blk <= ap_const_logic_0;

    ap_ST_fsm_state85_blk_assign_proc : process(grp_ROUND_fu_320_ap_done)
    begin
        if ((grp_ROUND_fu_320_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state85_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state85_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state86_blk <= ap_const_logic_0;

    ap_ST_fsm_state87_blk_assign_proc : process(grp_ROUND_fu_320_ap_done)
    begin
        if ((grp_ROUND_fu_320_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state87_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state87_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state88_blk <= ap_const_logic_0;

    ap_ST_fsm_state89_blk_assign_proc : process(grp_ROUND_fu_320_ap_done)
    begin
        if ((grp_ROUND_fu_320_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state89_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state89_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state8_blk_assign_proc : process(grp_ROUND_fu_320_ap_done)
    begin
        if ((grp_ROUND_fu_320_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state90_blk <= ap_const_logic_0;

    ap_ST_fsm_state91_blk_assign_proc : process(grp_ROUND_fu_320_ap_done)
    begin
        if ((grp_ROUND_fu_320_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state91_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state91_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state92_blk <= ap_const_logic_0;

    ap_ST_fsm_state93_blk_assign_proc : process(grp_ROUND_fu_320_ap_done)
    begin
        if ((grp_ROUND_fu_320_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state93_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state93_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state94_blk <= ap_const_logic_0;

    ap_ST_fsm_state95_blk_assign_proc : process(grp_ROUND_fu_320_ap_done)
    begin
        if ((grp_ROUND_fu_320_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state95_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state95_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state96_blk <= ap_const_logic_0;

    ap_ST_fsm_state97_blk_assign_proc : process(grp_ROUND_fu_320_ap_done)
    begin
        if ((grp_ROUND_fu_320_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state97_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state97_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state98_blk <= ap_const_logic_0;

    ap_ST_fsm_state99_blk_assign_proc : process(grp_ROUND_fu_320_ap_done)
    begin
        if ((grp_ROUND_fu_320_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state99_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state99_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state2_on_subcall_done_assign_proc : process(grp_LOADBYTES_1_fu_300_ap_done, grp_LOADBYTES_1_fu_308_ap_done)
    begin
                ap_block_state2_on_subcall_done <= ((grp_LOADBYTES_1_fu_308_ap_done = ap_const_logic_0) or (grp_LOADBYTES_1_fu_300_ap_done = ap_const_logic_0));
    end process;


    ap_block_state4_on_subcall_done_assign_proc : process(grp_LOADBYTES_1_fu_300_ap_done, grp_LOADBYTES_1_fu_308_ap_done)
    begin
                ap_block_state4_on_subcall_done <= ((grp_LOADBYTES_1_fu_308_ap_done = ap_const_logic_0) or (grp_LOADBYTES_1_fu_300_ap_done = ap_const_logic_0));
    end process;


    ap_block_state57_on_subcall_done_assign_proc : process(icmp_ln75_reg_842, grp_ROUND_fu_320_ap_done)
    begin
                ap_block_state57_on_subcall_done <= ((grp_ROUND_fu_320_ap_done = ap_const_logic_0) and (icmp_ln75_reg_842 = ap_const_lv1_0));
    end process;


    ap_block_state77_on_subcall_done_assign_proc : process(grp_ROUND_fu_320_ap_done, grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_ap_done)
    begin
                ap_block_state77_on_subcall_done <= ((grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_ap_done = ap_const_logic_0) or (grp_ROUND_fu_320_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_ap_done, ap_CS_fsm_state103)
    begin
        if ((((grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state103)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_adlen_addr_0_lcssa_phi_fu_260_p4_assign_proc : process(icmp_ln77_reg_846, ap_CS_fsm_state31, icmp_ln77_1_fu_449_p2, and_ln77_1_fu_506_p3, adlen_addr_0_lcssa_reg_257)
    begin
        if (((icmp_ln77_1_fu_449_p2 = ap_const_lv1_1) and (icmp_ln77_reg_846 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            ap_phi_mux_adlen_addr_0_lcssa_phi_fu_260_p4 <= and_ln77_1_fu_506_p3;
        else 
            ap_phi_mux_adlen_addr_0_lcssa_phi_fu_260_p4 <= adlen_addr_0_lcssa_reg_257;
        end if; 
    end process;


    ap_phi_mux_m_addr_0_lcssa_idx_phi_fu_281_p4_assign_proc : process(icmp_ln104_reg_877, ap_CS_fsm_state60, icmp_ln104_1_fu_597_p2, and_ln1_fu_617_p3, m_addr_0_lcssa_idx_reg_277)
    begin
        if (((icmp_ln104_1_fu_597_p2 = ap_const_lv1_1) and (icmp_ln104_reg_877 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state60))) then 
            ap_phi_mux_m_addr_0_lcssa_idx_phi_fu_281_p4 <= and_ln1_fu_617_p3;
        else 
            ap_phi_mux_m_addr_0_lcssa_idx_phi_fu_281_p4 <= m_addr_0_lcssa_idx_reg_277;
        end if; 
    end process;


    ap_phi_mux_mlen_addr_0_lcssa_phi_fu_270_p4_assign_proc : process(icmp_ln104_reg_877, ap_CS_fsm_state60, icmp_ln104_1_fu_597_p2, and_ln104_1_fu_629_p3, mlen_addr_0_lcssa_reg_267)
    begin
        if (((icmp_ln104_1_fu_597_p2 = ap_const_lv1_1) and (icmp_ln104_reg_877 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state60))) then 
            ap_phi_mux_mlen_addr_0_lcssa_phi_fu_270_p4 <= and_ln104_1_fu_629_p3;
        else 
            ap_phi_mux_mlen_addr_0_lcssa_phi_fu_270_p4 <= mlen_addr_0_lcssa_reg_267;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_ap_done, ap_CS_fsm_state103)
    begin
        if (((grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state103))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    c_address0_assign_proc : process(ap_CS_fsm_state62, grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_c_address0, ap_CS_fsm_state77, zext_ln28_3_fu_706_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            c_address0 <= zext_ln28_3_fu_706_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            c_address0 <= grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_c_address0;
        else 
            c_address0 <= "XXXXXX";
        end if; 
    end process;


    c_ce0_assign_proc : process(ap_CS_fsm_state62, grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_c_ce0, ap_CS_fsm_state77)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            c_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            c_ce0 <= grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_c_ce0;
        else 
            c_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c_d0_assign_proc : process(ap_CS_fsm_state62, grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_c_d0, ap_CS_fsm_state77, trunc_ln28_1_fu_691_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            c_d0 <= trunc_ln28_1_fu_691_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            c_d0 <= grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_c_d0;
        else 
            c_d0 <= "XXXXXXXX";
        end if; 
    end process;


    c_we0_assign_proc : process(ap_CS_fsm_state62, grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_c_we0, icmp_ln28_fu_652_p2, ap_CS_fsm_state77)
    begin
        if (((icmp_ln28_fu_652_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state62))) then 
            c_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            c_we0 <= grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_c_we0;
        else 
            c_we0 <= ap_const_logic_0;
        end if; 
    end process;

    clen <= std_logic_vector(unsigned(mlen) + unsigned(ap_const_lv64_10));

    clen_ap_vld_assign_proc : process(ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            clen_ap_vld <= ap_const_logic_1;
        else 
            clen_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    empty_13_fu_393_p1 <= mlen(61 - 1 downto 0);
    empty_fu_389_p1 <= adlen(61 - 1 downto 0);
    grp_LOADBYTES_1_fu_300_ap_start <= grp_LOADBYTES_1_fu_300_ap_start_reg;

    grp_LOADBYTES_1_fu_300_bytes_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_LOADBYTES_1_fu_300_bytes <= ap_const_lv4_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_LOADBYTES_1_fu_300_bytes <= ap_const_lv4_0;
        else 
            grp_LOADBYTES_1_fu_300_bytes <= "XXXX";
        end if; 
    end process;

    grp_LOADBYTES_1_fu_308_ap_start <= grp_LOADBYTES_1_fu_308_ap_start_reg;

    grp_LOADBYTES_1_fu_308_bytes_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_LOADBYTES_1_fu_308_bytes <= ap_const_lv4_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_LOADBYTES_1_fu_308_bytes <= ap_const_lv4_0;
        else 
            grp_LOADBYTES_1_fu_308_bytes <= "XXXX";
        end if; 
    end process;


    grp_LOADBYTES_2_fu_338_ad_q0_assign_proc : process(m_q0, ad_q0, ap_CS_fsm_state61, ap_CS_fsm_state74, ap_CS_fsm_state32, ap_CS_fsm_state45)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state61))) then 
            grp_LOADBYTES_2_fu_338_ad_q0 <= m_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            grp_LOADBYTES_2_fu_338_ad_q0 <= ad_q0;
        else 
            grp_LOADBYTES_2_fu_338_ad_q0 <= "XXXXXXXX";
        end if; 
    end process;

    grp_LOADBYTES_2_fu_338_ap_start <= grp_LOADBYTES_2_fu_338_ap_start_reg;

    grp_LOADBYTES_2_fu_338_bytes_assign_proc : process(trunc_ln77_1_reg_867, trunc_ln104_1_reg_901, trunc_ln117_reg_906, ap_CS_fsm_state61, ap_CS_fsm_state74, ad_addr_0_lcssa_idx_reg_245, ap_CS_fsm_state32, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_LOADBYTES_2_fu_338_bytes <= trunc_ln117_reg_906;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            grp_LOADBYTES_2_fu_338_bytes <= trunc_ln104_1_reg_901;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_LOADBYTES_2_fu_338_bytes <= ad_addr_0_lcssa_idx_reg_245;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_LOADBYTES_2_fu_338_bytes <= trunc_ln77_1_reg_867;
        else 
            grp_LOADBYTES_2_fu_338_bytes <= "XXXXX";
        end if; 
    end process;


    grp_LOADBYTES_2_fu_338_n_assign_proc : process(trunc_ln88_reg_872, trunc_ln117_1_reg_911, ap_CS_fsm_state61, ap_CS_fsm_state74, ap_CS_fsm_state32, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_LOADBYTES_2_fu_338_n <= trunc_ln117_1_reg_911;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_LOADBYTES_2_fu_338_n <= trunc_ln88_reg_872;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state61))) then 
            grp_LOADBYTES_2_fu_338_n <= ap_const_lv32_8;
        else 
            grp_LOADBYTES_2_fu_338_n <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_ROUND_fu_320_C_assign_proc : process(icmp_ln75_reg_842, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state47, ap_CS_fsm_state49, ap_CS_fsm_state51, ap_CS_fsm_state53, ap_CS_fsm_state55, ap_CS_fsm_state57, ap_CS_fsm_state63, ap_CS_fsm_state65, ap_CS_fsm_state67, ap_CS_fsm_state69, ap_CS_fsm_state71, ap_CS_fsm_state73, ap_CS_fsm_state77, ap_CS_fsm_state79, ap_CS_fsm_state81, ap_CS_fsm_state83, ap_CS_fsm_state85, ap_CS_fsm_state87, ap_CS_fsm_state89, ap_CS_fsm_state91, ap_CS_fsm_state93, ap_CS_fsm_state95, ap_CS_fsm_state97, ap_CS_fsm_state99)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state28) or ((icmp_ln75_reg_842 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state57)))) then 
            grp_ROUND_fu_320_C <= ap_const_lv8_4B;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            grp_ROUND_fu_320_C <= ap_const_lv8_5A;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            grp_ROUND_fu_320_C <= ap_const_lv8_69;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            grp_ROUND_fu_320_C <= ap_const_lv8_78;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            grp_ROUND_fu_320_C <= ap_const_lv8_87;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            grp_ROUND_fu_320_C <= ap_const_lv8_96;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            grp_ROUND_fu_320_C <= ap_const_lv8_A5;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            grp_ROUND_fu_320_C <= ap_const_lv8_B4;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            grp_ROUND_fu_320_C <= ap_const_lv8_C3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_ROUND_fu_320_C <= ap_const_lv8_D2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            grp_ROUND_fu_320_C <= ap_const_lv8_E1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_ROUND_fu_320_C <= ap_const_lv8_F0;
        else 
            grp_ROUND_fu_320_C <= "XXXXXXXX";
        end if; 
    end process;

    grp_ROUND_fu_320_ap_start <= grp_ROUND_fu_320_ap_start_reg;
    grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_ap_start <= grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_ap_start_reg;
    grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_ap_start <= grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_ap_start_reg;
    grp_fu_366_p2 <= (s_q0 xor K0_reg_782);
    grp_fu_372_p2 <= (s_q1 xor K1_reg_800);
    grp_fu_378_p2 <= (s_q1 xor grp_LOADBYTES_2_fu_338_ap_return);
    icmp_ln104_1_fu_597_p2 <= "1" when (tmp_9_fu_587_p4 = ap_const_lv61_0) else "0";
    icmp_ln104_fu_569_p2 <= "1" when (tmp_8_fu_560_p4 = ap_const_lv61_0) else "0";
    icmp_ln28_fu_652_p2 <= "1" when (i_reg_289 = ap_const_lv4_8) else "0";
    icmp_ln75_fu_404_p2 <= "1" when (adlen = ap_const_lv64_0) else "0";
    icmp_ln77_1_fu_449_p2 <= "1" when (tmp_7_fu_439_p4 = ap_const_lv61_0) else "0";
    icmp_ln77_fu_420_p2 <= "1" when (tmp_5_fu_410_p4 = ap_const_lv61_0) else "0";
    k_address0 <= grp_LOADBYTES_1_fu_300_k_address0;

    k_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, grp_LOADBYTES_1_fu_300_k_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            k_ce0 <= grp_LOADBYTES_1_fu_300_k_ce0;
        else 
            k_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln28_fu_686_p2 <= std_logic_vector(shift_right(unsigned(xor_ln105_reg_917),to_integer(unsigned('0' & zext_ln28_2_fu_682_p1(31-1 downto 0)))));
    m_address0 <= grp_LOADBYTES_2_fu_338_ad_address0;

    m_ce0_assign_proc : process(ap_CS_fsm_state61, ap_CS_fsm_state74, grp_LOADBYTES_2_fu_338_ad_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state61))) then 
            m_ce0 <= grp_LOADBYTES_2_fu_338_ad_ce0;
        else 
            m_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    npub_address0 <= grp_LOADBYTES_1_fu_308_k_address0;

    npub_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, grp_LOADBYTES_1_fu_308_k_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            npub_ce0 <= grp_LOADBYTES_1_fu_308_k_ce0;
        else 
            npub_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    s_addr_1_reg_794 <= ap_const_lv64_1(3 - 1 downto 0);
    s_addr_2_reg_806 <= ap_const_lv64_2(3 - 1 downto 0);
    s_addr_3_reg_789 <= ap_const_lv64_3(3 - 1 downto 0);
    s_addr_4_reg_812 <= ap_const_lv64_4(3 - 1 downto 0);
    s_addr_reg_776 <= ap_const_lv64_0(3 - 1 downto 0);

    s_address0_assign_proc : process(ap_CS_fsm_state1, s_addr_reg_776, ap_CS_fsm_state2, s_addr_3_reg_789, s_addr_1_reg_794, ap_CS_fsm_state3, ap_CS_fsm_state4, s_addr_4_reg_812, ap_CS_fsm_state30, icmp_ln75_reg_842, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state74, grp_ROUND_fu_320_s_address0, grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_s_address0, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state47, ap_CS_fsm_state49, ap_CS_fsm_state51, ap_CS_fsm_state53, ap_CS_fsm_state55, ap_CS_fsm_state57, ap_CS_fsm_state63, ap_CS_fsm_state65, ap_CS_fsm_state67, ap_CS_fsm_state69, ap_CS_fsm_state71, ap_CS_fsm_state73, ap_CS_fsm_state77, ap_CS_fsm_state79, ap_CS_fsm_state81, ap_CS_fsm_state83, ap_CS_fsm_state85, ap_CS_fsm_state87, ap_CS_fsm_state89, ap_CS_fsm_state91, ap_CS_fsm_state93, ap_CS_fsm_state95, ap_CS_fsm_state97, ap_CS_fsm_state99, ap_CS_fsm_state45, ap_CS_fsm_state103, ap_CS_fsm_state29, ap_CS_fsm_state75, ap_CS_fsm_state100, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            s_address0 <= s_addr_1_reg_794;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            s_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            s_address0 <= s_addr_4_reg_812;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60))) then 
            s_address0 <= s_addr_reg_776;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            s_address0 <= s_addr_3_reg_789;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            s_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            s_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            s_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            s_address0 <= grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_s_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln75_reg_842 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state57)))) then 
            s_address0 <= grp_ROUND_fu_320_s_address0;
        else 
            s_address0 <= "XXX";
        end if; 
    end process;


    s_address1_assign_proc : process(ap_CS_fsm_state4, s_addr_2_reg_806, ap_CS_fsm_state30, icmp_ln75_reg_842, icmp_ln77_reg_846, ap_CS_fsm_state31, icmp_ln77_1_fu_449_p2, icmp_ln104_reg_877, ap_CS_fsm_state60, icmp_ln104_1_fu_597_p2, ap_CS_fsm_state74, grp_ROUND_fu_320_s_address1, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state47, ap_CS_fsm_state49, ap_CS_fsm_state51, ap_CS_fsm_state53, ap_CS_fsm_state55, ap_CS_fsm_state57, ap_CS_fsm_state63, ap_CS_fsm_state65, ap_CS_fsm_state67, ap_CS_fsm_state69, ap_CS_fsm_state71, ap_CS_fsm_state73, ap_CS_fsm_state77, ap_CS_fsm_state79, ap_CS_fsm_state81, ap_CS_fsm_state83, ap_CS_fsm_state85, ap_CS_fsm_state87, ap_CS_fsm_state89, ap_CS_fsm_state91, ap_CS_fsm_state93, ap_CS_fsm_state95, ap_CS_fsm_state97, ap_CS_fsm_state99, ap_CS_fsm_state32, ap_CS_fsm_state29, ap_CS_fsm_state58, ap_CS_fsm_state75, ap_CS_fsm_state100, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            s_address1 <= s_addr_2_reg_806;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state60) and ((icmp_ln104_1_fu_597_p2 = ap_const_lv1_1) or (icmp_ln104_reg_877 = ap_const_lv1_1)))) then 
            s_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state74) or ((icmp_ln104_1_fu_597_p2 = ap_const_lv1_0) and (icmp_ln104_reg_877 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state60)) or ((icmp_ln77_1_fu_449_p2 = ap_const_lv1_0) and (icmp_ln77_reg_846 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((ap_const_logic_1 = ap_CS_fsm_state31) and ((icmp_ln77_1_fu_449_p2 = ap_const_lv1_1) or (icmp_ln77_reg_846 = ap_const_lv1_1))))) then 
            s_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            s_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            s_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln75_reg_842 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state57)))) then 
            s_address1 <= grp_ROUND_fu_320_s_address1;
        else 
            s_address1 <= "XXX";
        end if; 
    end process;


    s_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state30, icmp_ln75_reg_842, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state74, grp_ROUND_fu_320_s_ce0, grp_LOADBYTES_2_fu_338_ap_done, grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_s_ce0, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state47, ap_CS_fsm_state49, ap_CS_fsm_state51, ap_CS_fsm_state53, ap_CS_fsm_state55, ap_CS_fsm_state57, ap_CS_fsm_state63, ap_CS_fsm_state65, ap_CS_fsm_state67, ap_CS_fsm_state69, ap_CS_fsm_state71, ap_CS_fsm_state73, ap_CS_fsm_state77, ap_CS_fsm_state79, ap_CS_fsm_state81, ap_CS_fsm_state83, ap_CS_fsm_state85, ap_CS_fsm_state87, ap_CS_fsm_state89, ap_CS_fsm_state91, ap_CS_fsm_state93, ap_CS_fsm_state95, ap_CS_fsm_state97, ap_CS_fsm_state99, ap_CS_fsm_state45, ap_CS_fsm_state103, ap_block_state2_on_subcall_done, ap_block_state4_on_subcall_done, ap_CS_fsm_state29, ap_CS_fsm_state75, ap_CS_fsm_state100, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state29) or ((grp_LOADBYTES_2_fu_338_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state45)) or ((grp_LOADBYTES_2_fu_338_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state74)) or ((grp_LOADBYTES_2_fu_338_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state61)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            s_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            s_ce0 <= grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_s_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln75_reg_842 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state57)))) then 
            s_ce0 <= grp_ROUND_fu_320_s_ce0;
        else 
            s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    s_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state30, icmp_ln75_reg_842, icmp_ln77_reg_846, ap_CS_fsm_state31, icmp_ln77_1_fu_449_p2, icmp_ln104_reg_877, ap_CS_fsm_state60, icmp_ln104_1_fu_597_p2, ap_CS_fsm_state74, grp_ROUND_fu_320_s_ce1, grp_LOADBYTES_2_fu_338_ap_done, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state47, ap_CS_fsm_state49, ap_CS_fsm_state51, ap_CS_fsm_state53, ap_CS_fsm_state55, ap_CS_fsm_state57, ap_CS_fsm_state63, ap_CS_fsm_state65, ap_CS_fsm_state67, ap_CS_fsm_state69, ap_CS_fsm_state71, ap_CS_fsm_state73, ap_CS_fsm_state77, ap_CS_fsm_state79, ap_CS_fsm_state81, ap_CS_fsm_state83, ap_CS_fsm_state85, ap_CS_fsm_state87, ap_CS_fsm_state89, ap_CS_fsm_state91, ap_CS_fsm_state93, ap_CS_fsm_state95, ap_CS_fsm_state97, ap_CS_fsm_state99, ap_CS_fsm_state32, ap_block_state4_on_subcall_done, ap_CS_fsm_state29, ap_CS_fsm_state58, ap_CS_fsm_state75, ap_CS_fsm_state100, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state29) or ((grp_LOADBYTES_2_fu_338_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32)) or ((grp_LOADBYTES_2_fu_338_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state74)) or ((icmp_ln104_1_fu_597_p2 = ap_const_lv1_0) and (icmp_ln104_reg_877 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state60)) or ((ap_const_logic_1 = ap_CS_fsm_state60) and ((icmp_ln104_1_fu_597_p2 = ap_const_lv1_1) or (icmp_ln104_reg_877 = ap_const_lv1_1))) or ((icmp_ln77_1_fu_449_p2 = ap_const_lv1_0) and (icmp_ln77_reg_846 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((ap_const_logic_1 = ap_CS_fsm_state31) and ((icmp_ln77_1_fu_449_p2 = ap_const_lv1_1) or (icmp_ln77_reg_846 = ap_const_lv1_1))) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done)))) then 
            s_ce1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln75_reg_842 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state57)))) then 
            s_ce1 <= grp_ROUND_fu_320_s_ce1;
        else 
            s_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    s_d0_assign_proc : process(ap_CS_fsm_state1, K0_reg_782, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state30, icmp_ln75_reg_842, ap_CS_fsm_state59, grp_fu_378_p2, ap_CS_fsm_state61, grp_LOADBYTES_1_fu_308_ap_return, grp_ROUND_fu_320_s_d0, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state47, ap_CS_fsm_state49, ap_CS_fsm_state51, ap_CS_fsm_state53, ap_CS_fsm_state55, ap_CS_fsm_state57, ap_CS_fsm_state63, ap_CS_fsm_state65, ap_CS_fsm_state67, ap_CS_fsm_state69, ap_CS_fsm_state71, ap_CS_fsm_state73, ap_CS_fsm_state77, ap_CS_fsm_state79, ap_CS_fsm_state81, ap_CS_fsm_state83, ap_CS_fsm_state85, ap_CS_fsm_state87, ap_CS_fsm_state89, ap_CS_fsm_state91, ap_CS_fsm_state93, ap_CS_fsm_state95, ap_CS_fsm_state97, ap_CS_fsm_state99, ap_CS_fsm_state45, grp_fu_366_p2, xor_ln89_fu_546_p2, xor_ln97_fu_553_p2, ap_CS_fsm_state75, xor_ln127_fu_765_p2, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            s_d0 <= xor_ln127_fu_765_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            s_d0 <= grp_fu_378_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            s_d0 <= xor_ln97_fu_553_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            s_d0 <= xor_ln89_fu_546_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state101))) then 
            s_d0 <= grp_fu_366_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            s_d0 <= K0_reg_782;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            s_d0 <= grp_LOADBYTES_1_fu_308_ap_return;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            s_d0 <= ap_const_lv64_80400C0600000000;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln75_reg_842 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state57)))) then 
            s_d0 <= grp_ROUND_fu_320_s_d0;
        else 
            s_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    s_d1_assign_proc : process(grp_LOADBYTES_1_fu_300_ap_return, ap_CS_fsm_state4, ap_CS_fsm_state30, icmp_ln75_reg_842, grp_fu_378_p2, ap_CS_fsm_state74, grp_ROUND_fu_320_s_d1, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state47, ap_CS_fsm_state49, ap_CS_fsm_state51, ap_CS_fsm_state53, ap_CS_fsm_state55, ap_CS_fsm_state57, ap_CS_fsm_state63, ap_CS_fsm_state65, ap_CS_fsm_state67, ap_CS_fsm_state69, ap_CS_fsm_state71, ap_CS_fsm_state73, ap_CS_fsm_state77, ap_CS_fsm_state79, ap_CS_fsm_state81, ap_CS_fsm_state83, ap_CS_fsm_state85, ap_CS_fsm_state87, ap_CS_fsm_state89, ap_CS_fsm_state91, ap_CS_fsm_state93, ap_CS_fsm_state95, ap_CS_fsm_state97, ap_CS_fsm_state99, ap_CS_fsm_state32, grp_fu_372_p2, xor_ln119_fu_758_p2, ap_CS_fsm_state75, xor_ln128_fu_770_p2, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            s_d1 <= xor_ln128_fu_770_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            s_d1 <= xor_ln119_fu_758_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            s_d1 <= grp_fu_378_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state101))) then 
            s_d1 <= grp_fu_372_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            s_d1 <= grp_LOADBYTES_1_fu_300_ap_return;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln75_reg_842 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state57)))) then 
            s_d1 <= grp_ROUND_fu_320_s_d1;
        else 
            s_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    s_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state30, icmp_ln75_reg_842, ap_CS_fsm_state59, ap_CS_fsm_state61, grp_ROUND_fu_320_s_we0, grp_LOADBYTES_2_fu_338_ap_done, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state47, ap_CS_fsm_state49, ap_CS_fsm_state51, ap_CS_fsm_state53, ap_CS_fsm_state55, ap_CS_fsm_state57, ap_CS_fsm_state63, ap_CS_fsm_state65, ap_CS_fsm_state67, ap_CS_fsm_state69, ap_CS_fsm_state71, ap_CS_fsm_state73, ap_CS_fsm_state77, ap_CS_fsm_state79, ap_CS_fsm_state81, ap_CS_fsm_state83, ap_CS_fsm_state85, ap_CS_fsm_state87, ap_CS_fsm_state89, ap_CS_fsm_state91, ap_CS_fsm_state93, ap_CS_fsm_state95, ap_CS_fsm_state97, ap_CS_fsm_state99, ap_CS_fsm_state45, ap_block_state2_on_subcall_done, ap_block_state4_on_subcall_done, ap_CS_fsm_state75, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state75) or ((grp_LOADBYTES_2_fu_338_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state45)) or ((grp_LOADBYTES_2_fu_338_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state61)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            s_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln75_reg_842 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state57)))) then 
            s_we0 <= grp_ROUND_fu_320_s_we0;
        else 
            s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    s_we1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state30, icmp_ln75_reg_842, ap_CS_fsm_state74, grp_ROUND_fu_320_s_we1, grp_LOADBYTES_2_fu_338_ap_done, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state47, ap_CS_fsm_state49, ap_CS_fsm_state51, ap_CS_fsm_state53, ap_CS_fsm_state55, ap_CS_fsm_state57, ap_CS_fsm_state63, ap_CS_fsm_state65, ap_CS_fsm_state67, ap_CS_fsm_state69, ap_CS_fsm_state71, ap_CS_fsm_state73, ap_CS_fsm_state77, ap_CS_fsm_state79, ap_CS_fsm_state81, ap_CS_fsm_state83, ap_CS_fsm_state85, ap_CS_fsm_state87, ap_CS_fsm_state89, ap_CS_fsm_state91, ap_CS_fsm_state93, ap_CS_fsm_state95, ap_CS_fsm_state97, ap_CS_fsm_state99, ap_CS_fsm_state32, ap_block_state4_on_subcall_done, ap_CS_fsm_state75, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state75) or ((grp_LOADBYTES_2_fu_338_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32)) or ((grp_LOADBYTES_2_fu_338_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state74)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done)))) then 
            s_we1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln75_reg_842 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state57)))) then 
            s_we1 <= grp_ROUND_fu_320_s_we1;
        else 
            s_we1 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln119_fu_752_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_80),to_integer(unsigned('0' & sub_ln119_fu_746_p2(31-1 downto 0)))));
    shl_ln1_fu_668_p3 <= (trunc_ln28_fu_664_p1 & ap_const_lv3_0);
    shl_ln2_fu_738_p3 <= (mlen_addr_0_lcssa_reg_267 & ap_const_lv3_0);
    shl_ln89_fu_534_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_80),to_integer(unsigned('0' & sub_ln89_fu_528_p2(31-1 downto 0)))));
    shl_ln_fu_520_p3 <= (adlen_addr_0_lcssa_reg_257 & ap_const_lv3_0);
    st_address0 <= grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_st_address0;
    st_ce0 <= grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_st_ce0;
    st_d0 <= grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_st_d0;
    st_we0 <= grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_st_we0;
    sub_ln119_fu_746_p2 <= std_logic_vector(unsigned(ap_const_lv64_38) - unsigned(shl_ln2_fu_738_p3));
    sub_ln28_fu_676_p2 <= std_logic_vector(signed(ap_const_lv6_38) - signed(shl_ln1_fu_668_p3));
    sub_ln89_fu_528_p2 <= std_logic_vector(unsigned(ap_const_lv64_38) - unsigned(shl_ln_fu_520_p3));
    tmp_4_fu_485_p4 <= adlen(4 downto 3);
    tmp_5_fu_410_p4 <= adlen(63 downto 3);
    tmp_6_fu_608_p4 <= mlen(5 downto 3);
    tmp_7_fu_439_p4 <= adlen_assign_fu_150(63 downto 3);
    tmp_8_fu_560_p4 <= mlen(63 downto 3);
    tmp_9_fu_587_p4 <= mlen_assign_fu_158(63 downto 3);
    trunc_ln104_1_fu_603_p1 <= m_assign_fu_154(5 - 1 downto 0);
    trunc_ln104_2_fu_696_p1 <= m_assign_fu_154(6 - 1 downto 0);
    trunc_ln104_fu_626_p1 <= mlen(3 - 1 downto 0);
    trunc_ln117_1_fu_643_p1 <= ap_phi_mux_mlen_addr_0_lcssa_phi_fu_270_p4(32 - 1 downto 0);
    trunc_ln117_fu_638_p1 <= ap_phi_mux_m_addr_0_lcssa_idx_phi_fu_281_p4(5 - 1 downto 0);
    trunc_ln28_1_fu_691_p1 <= lshr_ln28_fu_686_p2(8 - 1 downto 0);
    trunc_ln28_fu_664_p1 <= i_reg_289(3 - 1 downto 0);
    trunc_ln77_1_fu_458_p1 <= ad_assign_fu_146(5 - 1 downto 0);
    trunc_ln77_fu_503_p1 <= adlen(3 - 1 downto 0);
    trunc_ln88_fu_515_p1 <= ap_phi_mux_adlen_addr_0_lcssa_phi_fu_260_p4(32 - 1 downto 0);
    xor_ln117_fu_732_p2 <= (s_q0 xor grp_LOADBYTES_2_fu_338_ap_return);
    xor_ln119_fu_758_p2 <= (xor_ln117_fu_732_p2 xor shl_ln119_fu_752_p2);
    xor_ln127_fu_765_p2 <= (s_load_3_reg_935 xor K0_reg_782);
    xor_ln128_fu_770_p2 <= (s_q0 xor K1_reg_800);
    xor_ln89_1_fu_540_p2 <= (shl_ln89_fu_534_p2 xor grp_LOADBYTES_2_fu_338_ap_return);
    xor_ln89_fu_546_p2 <= (xor_ln89_1_fu_540_p2 xor s_q1);
    xor_ln97_fu_553_p2 <= (s_q1 xor ap_const_lv64_1);
    zext_ln28_2_fu_682_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln28_fu_676_p2),64));
    zext_ln28_3_fu_706_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_fu_700_p2),64));
    zext_ln28_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_289),6));
end behav;
