-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity crypto_aead_encrypt_h_ROUND is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    s_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    s_ce0 : OUT STD_LOGIC;
    s_we0 : OUT STD_LOGIC;
    s_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    s_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    s_ce1 : OUT STD_LOGIC;
    s_we1 : OUT STD_LOGIC;
    s_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    C : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of crypto_aead_encrypt_h_ROUND is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal s_addr_5_reg_559 : STD_LOGIC_VECTOR (2 downto 0);
    signal s_addr_reg_564 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal s_load_reg_569 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_addr_6_reg_574 : STD_LOGIC_VECTOR (2 downto 0);
    signal s_load_8_reg_579 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal s_load_9_reg_586 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_addr_8_reg_597 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_1_fu_205_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_1_reg_602 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal xor_ln36_1_fu_435_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln36_1_reg_607 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln37_1_fu_491_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln37_1_reg_612 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln33_1_fu_321_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln34_1_fu_378_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal xor_ln35_1_fu_552_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln14_fu_140_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln14_fu_144_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln21_fu_164_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln21_fu_170_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln17_fu_149_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln19_fu_158_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln22_fu_182_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln23_fu_194_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln23_fu_200_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln18_fu_153_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln24_fu_211_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln25_fu_223_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln25_fu_229_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln22_fu_188_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_fu_176_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln27_fu_241_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_2_fu_235_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln24_fu_217_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln29_fu_259_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_4_fu_253_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln8_fu_281_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal lshr_ln8_fu_271_p4 : STD_LOGIC_VECTOR (44 downto 0);
    signal trunc_ln8_1_fu_303_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal lshr_ln8_1_fu_293_p4 : STD_LOGIC_VECTOR (35 downto 0);
    signal or_ln8_1_fu_307_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln33_fu_315_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln8_fu_285_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_3_fu_247_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln8_2_fu_338_p1 : STD_LOGIC_VECTOR (60 downto 0);
    signal lshr_ln8_2_fu_328_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln8_3_fu_360_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal lshr_ln8_3_fu_350_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal or_ln8_3_fu_364_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln34_fu_372_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln8_2_fu_342_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_5_fu_265_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln8_6_fu_395_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal lshr_ln8_6_fu_385_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln8_7_fu_417_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal lshr_ln8_7_fu_407_p4 : STD_LOGIC_VECTOR (46 downto 0);
    signal or_ln8_7_fu_421_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln36_fu_429_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln8_6_fu_399_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln8_8_fu_451_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal lshr_ln8_8_fu_441_p4 : STD_LOGIC_VECTOR (56 downto 0);
    signal trunc_ln8_9_fu_473_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal lshr_ln8_9_fu_463_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln8_9_fu_477_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln37_fu_485_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln8_8_fu_455_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_6_fu_497_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln8_4_fu_512_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln8_4_fu_502_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln8_5_fu_534_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal lshr_ln8_5_fu_524_p4 : STD_LOGIC_VECTOR (57 downto 0);
    signal or_ln8_5_fu_538_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln35_fu_546_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln8_4_fu_516_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                s_load_8_reg_579 <= s_q1;
                s_load_9_reg_586 <= s_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                s_load_reg_569 <= s_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                t_1_reg_602 <= t_1_fu_205_p2;
                xor_ln36_1_reg_607 <= xor_ln36_1_fu_435_p2;
                xor_ln37_1_reg_612 <= xor_ln37_1_fu_491_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    and_ln21_fu_170_p2 <= (xor_ln21_fu_164_p2 and xor_ln14_fu_144_p2);
    and_ln22_fu_188_p2 <= (xor_ln22_fu_182_p2 and s_q0);
    and_ln23_fu_200_p2 <= (xor_ln23_fu_194_p2 and s_load_8_reg_579);
    and_ln24_fu_217_p2 <= (xor_ln24_fu_211_p2 and xor_ln17_fu_149_p2);
    and_ln25_fu_229_p2 <= (xor_ln25_fu_223_p2 and s_q1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln8_1_fu_293_p4 <= t_4_fu_253_p2(63 downto 28);
    lshr_ln8_2_fu_328_p4 <= t_3_fu_247_p2(63 downto 61);
    lshr_ln8_3_fu_350_p4 <= t_3_fu_247_p2(63 downto 39);
    lshr_ln8_4_fu_502_p4 <= t_6_fu_497_p2(63 downto 1);
    lshr_ln8_5_fu_524_p4 <= t_6_fu_497_p2(63 downto 6);
    lshr_ln8_6_fu_385_p4 <= t_5_fu_265_p2(63 downto 10);
    lshr_ln8_7_fu_407_p4 <= t_5_fu_265_p2(63 downto 17);
    lshr_ln8_8_fu_441_p4 <= t_2_fu_235_p2(63 downto 7);
    lshr_ln8_9_fu_463_p4 <= t_2_fu_235_p2(63 downto 41);
    lshr_ln8_fu_271_p4 <= t_4_fu_253_p2(63 downto 19);
    or_ln8_1_fu_307_p3 <= (trunc_ln8_1_fu_303_p1 & lshr_ln8_1_fu_293_p4);
    or_ln8_2_fu_342_p3 <= (trunc_ln8_2_fu_338_p1 & lshr_ln8_2_fu_328_p4);
    or_ln8_3_fu_364_p3 <= (trunc_ln8_3_fu_360_p1 & lshr_ln8_3_fu_350_p4);
    or_ln8_4_fu_516_p3 <= (trunc_ln8_4_fu_512_p1 & lshr_ln8_4_fu_502_p4);
    or_ln8_5_fu_538_p3 <= (trunc_ln8_5_fu_534_p1 & lshr_ln8_5_fu_524_p4);
    or_ln8_6_fu_399_p3 <= (trunc_ln8_6_fu_395_p1 & lshr_ln8_6_fu_385_p4);
    or_ln8_7_fu_421_p3 <= (trunc_ln8_7_fu_417_p1 & lshr_ln8_7_fu_407_p4);
    or_ln8_8_fu_455_p3 <= (trunc_ln8_8_fu_451_p1 & lshr_ln8_8_fu_441_p4);
    or_ln8_9_fu_477_p3 <= (trunc_ln8_9_fu_473_p1 & lshr_ln8_9_fu_463_p4);
    or_ln8_fu_285_p3 <= (trunc_ln8_fu_281_p1 & lshr_ln8_fu_271_p4);
    s_addr_5_reg_559 <= ap_const_lv64_2(3 - 1 downto 0);
    s_addr_6_reg_574 <= ap_const_lv64_4(3 - 1 downto 0);
    s_addr_8_reg_597 <= ap_const_lv64_1(3 - 1 downto 0);
    s_addr_reg_564 <= ap_const_lv64_0(3 - 1 downto 0);

    s_address0_assign_proc : process(ap_CS_fsm_state1, s_addr_5_reg_559, s_addr_reg_564, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            s_address0 <= s_addr_5_reg_559;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            s_address0 <= s_addr_reg_564;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            s_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            s_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        else 
            s_address0 <= "XXX";
        end if; 
    end process;


    s_address1_assign_proc : process(ap_CS_fsm_state2, s_addr_6_reg_574, ap_CS_fsm_state3, s_addr_8_reg_597, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            s_address1 <= s_addr_6_reg_574;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            s_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            s_address1 <= s_addr_8_reg_597;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            s_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        else 
            s_address1 <= "XXX";
        end if; 
    end process;


    s_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            s_ce0 <= ap_const_logic_1;
        else 
            s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    s_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            s_ce1 <= ap_const_logic_1;
        else 
            s_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    s_d0_assign_proc : process(ap_CS_fsm_state4, xor_ln33_1_fu_321_p2, ap_CS_fsm_state5, xor_ln35_1_fu_552_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            s_d0 <= xor_ln35_1_fu_552_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            s_d0 <= xor_ln33_1_fu_321_p2;
        else 
            s_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    s_d1_assign_proc : process(ap_CS_fsm_state4, xor_ln36_1_reg_607, xor_ln37_1_reg_612, xor_ln34_1_fu_378_p2, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            s_d1 <= xor_ln37_1_reg_612;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            s_d1 <= xor_ln36_1_reg_607;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            s_d1 <= xor_ln34_1_fu_378_p2;
        else 
            s_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    s_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            s_we0 <= ap_const_logic_1;
        else 
            s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    s_we1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            s_we1 <= ap_const_logic_1;
        else 
            s_we1 <= ap_const_logic_0;
        end if; 
    end process;

    t_1_fu_205_p2 <= (xor_ln19_fu_158_p2 xor and_ln23_fu_200_p2);
    t_2_fu_235_p2 <= (xor_ln18_fu_153_p2 xor and_ln25_fu_229_p2);
    t_3_fu_247_p2 <= (xor_ln27_fu_241_p2 xor s_q1);
    t_4_fu_253_p2 <= (t_fu_176_p2 xor t_2_fu_235_p2);
    t_5_fu_265_p2 <= (xor_ln29_fu_259_p2 xor s_q0);
    t_6_fu_497_p2 <= (t_1_reg_602 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    t_fu_176_p2 <= (xor_ln17_fu_149_p2 xor and_ln21_fu_170_p2);
    trunc_ln8_1_fu_303_p1 <= t_4_fu_253_p2(28 - 1 downto 0);
    trunc_ln8_2_fu_338_p1 <= t_3_fu_247_p2(61 - 1 downto 0);
    trunc_ln8_3_fu_360_p1 <= t_3_fu_247_p2(39 - 1 downto 0);
    trunc_ln8_4_fu_512_p1 <= t_6_fu_497_p2(1 - 1 downto 0);
    trunc_ln8_5_fu_534_p1 <= t_6_fu_497_p2(6 - 1 downto 0);
    trunc_ln8_6_fu_395_p1 <= t_5_fu_265_p2(10 - 1 downto 0);
    trunc_ln8_7_fu_417_p1 <= t_5_fu_265_p2(17 - 1 downto 0);
    trunc_ln8_8_fu_451_p1 <= t_2_fu_235_p2(7 - 1 downto 0);
    trunc_ln8_9_fu_473_p1 <= t_2_fu_235_p2(41 - 1 downto 0);
    trunc_ln8_fu_281_p1 <= t_4_fu_253_p2(19 - 1 downto 0);
    xor_ln14_fu_144_p2 <= (zext_ln14_fu_140_p1 xor s_load_reg_569);
    xor_ln17_fu_149_p2 <= (s_load_9_reg_586 xor s_load_8_reg_579);
    xor_ln18_fu_153_p2 <= (s_q0 xor s_load_8_reg_579);
    xor_ln19_fu_158_p2 <= (xor_ln14_fu_144_p2 xor s_q1);
    xor_ln21_fu_164_p2 <= (s_q1 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln22_fu_182_p2 <= (xor_ln19_fu_158_p2 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln23_fu_194_p2 <= (s_q0 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln24_fu_211_p2 <= (xor_ln18_fu_153_p2 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln25_fu_223_p2 <= (xor_ln17_fu_149_p2 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    xor_ln27_fu_241_p2 <= (t_fu_176_p2 xor and_ln22_fu_188_p2);
    xor_ln29_fu_259_p2 <= (t_1_fu_205_p2 xor and_ln24_fu_217_p2);
    xor_ln33_1_fu_321_p2 <= (xor_ln33_fu_315_p2 xor or_ln8_fu_285_p3);
    xor_ln33_fu_315_p2 <= (t_4_fu_253_p2 xor or_ln8_1_fu_307_p3);
    xor_ln34_1_fu_378_p2 <= (xor_ln34_fu_372_p2 xor or_ln8_2_fu_342_p3);
    xor_ln34_fu_372_p2 <= (t_3_fu_247_p2 xor or_ln8_3_fu_364_p3);
    xor_ln35_1_fu_552_p2 <= (xor_ln35_fu_546_p2 xor or_ln8_4_fu_516_p3);
    xor_ln35_fu_546_p2 <= (t_6_fu_497_p2 xor or_ln8_5_fu_538_p3);
    xor_ln36_1_fu_435_p2 <= (xor_ln36_fu_429_p2 xor or_ln8_6_fu_399_p3);
    xor_ln36_fu_429_p2 <= (t_5_fu_265_p2 xor or_ln8_7_fu_421_p3);
    xor_ln37_1_fu_491_p2 <= (xor_ln37_fu_485_p2 xor or_ln8_8_fu_455_p3);
    xor_ln37_fu_485_p2 <= (t_2_fu_235_p2 xor or_ln8_9_fu_477_p3);
    zext_ln14_fu_140_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(C),64));
end behav;
