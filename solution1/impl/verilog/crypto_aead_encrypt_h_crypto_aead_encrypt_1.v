// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module crypto_aead_encrypt_h_crypto_aead_encrypt_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        c_address0,
        c_ce0,
        c_we0,
        c_d0,
        clen,
        clen_ap_vld,
        m_address0,
        m_ce0,
        m_q0,
        mlen,
        ad_address0,
        ad_ce0,
        ad_q0,
        adlen,
        npub_address0,
        npub_ce0,
        npub_q0,
        k_address0,
        k_ce0,
        k_q0,
        st_address0,
        st_ce0,
        st_we0,
        st_d0
);

parameter    ap_ST_fsm_state1 = 103'd1;
parameter    ap_ST_fsm_state2 = 103'd2;
parameter    ap_ST_fsm_state3 = 103'd4;
parameter    ap_ST_fsm_state4 = 103'd8;
parameter    ap_ST_fsm_state5 = 103'd16;
parameter    ap_ST_fsm_state6 = 103'd32;
parameter    ap_ST_fsm_state7 = 103'd64;
parameter    ap_ST_fsm_state8 = 103'd128;
parameter    ap_ST_fsm_state9 = 103'd256;
parameter    ap_ST_fsm_state10 = 103'd512;
parameter    ap_ST_fsm_state11 = 103'd1024;
parameter    ap_ST_fsm_state12 = 103'd2048;
parameter    ap_ST_fsm_state13 = 103'd4096;
parameter    ap_ST_fsm_state14 = 103'd8192;
parameter    ap_ST_fsm_state15 = 103'd16384;
parameter    ap_ST_fsm_state16 = 103'd32768;
parameter    ap_ST_fsm_state17 = 103'd65536;
parameter    ap_ST_fsm_state18 = 103'd131072;
parameter    ap_ST_fsm_state19 = 103'd262144;
parameter    ap_ST_fsm_state20 = 103'd524288;
parameter    ap_ST_fsm_state21 = 103'd1048576;
parameter    ap_ST_fsm_state22 = 103'd2097152;
parameter    ap_ST_fsm_state23 = 103'd4194304;
parameter    ap_ST_fsm_state24 = 103'd8388608;
parameter    ap_ST_fsm_state25 = 103'd16777216;
parameter    ap_ST_fsm_state26 = 103'd33554432;
parameter    ap_ST_fsm_state27 = 103'd67108864;
parameter    ap_ST_fsm_state28 = 103'd134217728;
parameter    ap_ST_fsm_state29 = 103'd268435456;
parameter    ap_ST_fsm_state30 = 103'd536870912;
parameter    ap_ST_fsm_state31 = 103'd1073741824;
parameter    ap_ST_fsm_state32 = 103'd2147483648;
parameter    ap_ST_fsm_state33 = 103'd4294967296;
parameter    ap_ST_fsm_state34 = 103'd8589934592;
parameter    ap_ST_fsm_state35 = 103'd17179869184;
parameter    ap_ST_fsm_state36 = 103'd34359738368;
parameter    ap_ST_fsm_state37 = 103'd68719476736;
parameter    ap_ST_fsm_state38 = 103'd137438953472;
parameter    ap_ST_fsm_state39 = 103'd274877906944;
parameter    ap_ST_fsm_state40 = 103'd549755813888;
parameter    ap_ST_fsm_state41 = 103'd1099511627776;
parameter    ap_ST_fsm_state42 = 103'd2199023255552;
parameter    ap_ST_fsm_state43 = 103'd4398046511104;
parameter    ap_ST_fsm_state44 = 103'd8796093022208;
parameter    ap_ST_fsm_state45 = 103'd17592186044416;
parameter    ap_ST_fsm_state46 = 103'd35184372088832;
parameter    ap_ST_fsm_state47 = 103'd70368744177664;
parameter    ap_ST_fsm_state48 = 103'd140737488355328;
parameter    ap_ST_fsm_state49 = 103'd281474976710656;
parameter    ap_ST_fsm_state50 = 103'd562949953421312;
parameter    ap_ST_fsm_state51 = 103'd1125899906842624;
parameter    ap_ST_fsm_state52 = 103'd2251799813685248;
parameter    ap_ST_fsm_state53 = 103'd4503599627370496;
parameter    ap_ST_fsm_state54 = 103'd9007199254740992;
parameter    ap_ST_fsm_state55 = 103'd18014398509481984;
parameter    ap_ST_fsm_state56 = 103'd36028797018963968;
parameter    ap_ST_fsm_state57 = 103'd72057594037927936;
parameter    ap_ST_fsm_state58 = 103'd144115188075855872;
parameter    ap_ST_fsm_state59 = 103'd288230376151711744;
parameter    ap_ST_fsm_state60 = 103'd576460752303423488;
parameter    ap_ST_fsm_state61 = 103'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 103'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 103'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 103'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 103'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 103'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 103'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 103'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 103'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 103'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 103'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 103'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 103'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 103'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 103'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 103'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 103'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 103'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 103'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 103'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 103'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 103'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 103'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 103'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 103'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 103'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 103'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 103'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 103'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 103'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 103'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 103'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 103'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 103'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 103'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 103'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 103'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 103'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 103'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 103'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 103'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 103'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 103'd5070602400912917605986812821504;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] c_address0;
output   c_ce0;
output   c_we0;
output  [7:0] c_d0;
output  [63:0] clen;
output   clen_ap_vld;
output  [4:0] m_address0;
output   m_ce0;
input  [7:0] m_q0;
input  [63:0] mlen;
output  [4:0] ad_address0;
output   ad_ce0;
input  [7:0] ad_q0;
input  [63:0] adlen;
output  [3:0] npub_address0;
output   npub_ce0;
input  [7:0] npub_q0;
output  [3:0] k_address0;
output   k_ce0;
input  [7:0] k_q0;
output  [2:0] st_address0;
output   st_ce0;
output   st_we0;
output  [63:0] st_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] c_address0;
reg c_ce0;
reg c_we0;
reg[7:0] c_d0;
reg clen_ap_vld;
reg m_ce0;
reg ad_ce0;
reg npub_ce0;
reg k_ce0;

(* fsm_encoding = "none" *) reg   [102:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] s_addr_reg_776;
wire   [63:0] grp_LOADBYTES_1_fu_300_ap_return;
reg   [63:0] K0_reg_782;
wire    ap_CS_fsm_state2;
wire   [2:0] s_addr_3_reg_789;
wire   [2:0] s_addr_1_reg_794;
wire    ap_CS_fsm_state3;
reg   [63:0] K1_reg_800;
wire    ap_CS_fsm_state4;
wire   [2:0] s_addr_2_reg_806;
wire   [2:0] s_addr_4_reg_812;
wire    ap_CS_fsm_state30;
wire   [60:0] empty_fu_389_p1;
wire   [60:0] empty_13_fu_393_p1;
reg   [60:0] empty_13_reg_837;
wire   [0:0] icmp_ln75_fu_404_p2;
reg   [0:0] icmp_ln75_reg_842;
wire   [0:0] icmp_ln77_fu_420_p2;
reg   [0:0] icmp_ln77_reg_846;
wire   [4:0] trunc_ln77_1_fu_458_p1;
reg   [4:0] trunc_ln77_1_reg_867;
wire    ap_CS_fsm_state31;
wire   [0:0] icmp_ln77_1_fu_449_p2;
wire   [31:0] trunc_ln88_fu_515_p1;
reg   [31:0] trunc_ln88_reg_872;
wire   [0:0] icmp_ln104_fu_569_p2;
reg   [0:0] icmp_ln104_reg_877;
wire    ap_CS_fsm_state59;
wire   [4:0] trunc_ln104_1_fu_603_p1;
reg   [4:0] trunc_ln104_1_reg_901;
wire    ap_CS_fsm_state60;
wire   [0:0] icmp_ln104_1_fu_597_p2;
wire   [4:0] trunc_ln117_fu_638_p1;
reg   [4:0] trunc_ln117_reg_906;
wire   [31:0] trunc_ln117_1_fu_643_p1;
reg   [31:0] trunc_ln117_1_reg_911;
wire   [63:0] grp_fu_378_p2;
reg   [63:0] xor_ln105_reg_917;
wire    ap_CS_fsm_state61;
wire   [3:0] add_ln28_1_fu_658_p2;
wire    ap_CS_fsm_state62;
wire   [63:0] xor_ln117_fu_732_p2;
reg   [63:0] xor_ln117_reg_930;
wire    ap_CS_fsm_state74;
wire   [63:0] s_q1;
reg   [63:0] s_load_3_reg_935;
reg   [2:0] s_address0;
reg    s_ce0;
reg    s_we0;
reg   [63:0] s_d0;
wire   [63:0] s_q0;
reg   [2:0] s_address1;
reg    s_ce1;
reg    s_we1;
reg   [63:0] s_d1;
wire    grp_LOADBYTES_1_fu_300_ap_start;
wire    grp_LOADBYTES_1_fu_300_ap_done;
wire    grp_LOADBYTES_1_fu_300_ap_idle;
wire    grp_LOADBYTES_1_fu_300_ap_ready;
wire   [3:0] grp_LOADBYTES_1_fu_300_k_address0;
wire    grp_LOADBYTES_1_fu_300_k_ce0;
reg   [3:0] grp_LOADBYTES_1_fu_300_bytes;
wire    grp_LOADBYTES_1_fu_308_ap_start;
wire    grp_LOADBYTES_1_fu_308_ap_done;
wire    grp_LOADBYTES_1_fu_308_ap_idle;
wire    grp_LOADBYTES_1_fu_308_ap_ready;
wire   [3:0] grp_LOADBYTES_1_fu_308_k_address0;
wire    grp_LOADBYTES_1_fu_308_k_ce0;
reg   [3:0] grp_LOADBYTES_1_fu_308_bytes;
wire   [63:0] grp_LOADBYTES_1_fu_308_ap_return;
wire    grp_ROUND_fu_320_ap_start;
wire    grp_ROUND_fu_320_ap_done;
wire    grp_ROUND_fu_320_ap_idle;
wire    grp_ROUND_fu_320_ap_ready;
wire   [2:0] grp_ROUND_fu_320_s_address0;
wire    grp_ROUND_fu_320_s_ce0;
wire    grp_ROUND_fu_320_s_we0;
wire   [63:0] grp_ROUND_fu_320_s_d0;
wire   [2:0] grp_ROUND_fu_320_s_address1;
wire    grp_ROUND_fu_320_s_ce1;
wire    grp_ROUND_fu_320_s_we1;
wire   [63:0] grp_ROUND_fu_320_s_d1;
reg   [7:0] grp_ROUND_fu_320_C;
wire    grp_LOADBYTES_2_fu_338_ap_start;
wire    grp_LOADBYTES_2_fu_338_ap_done;
wire    grp_LOADBYTES_2_fu_338_ap_idle;
wire    grp_LOADBYTES_2_fu_338_ap_ready;
wire   [4:0] grp_LOADBYTES_2_fu_338_ad_address0;
wire    grp_LOADBYTES_2_fu_338_ad_ce0;
reg   [7:0] grp_LOADBYTES_2_fu_338_ad_q0;
reg   [4:0] grp_LOADBYTES_2_fu_338_bytes;
reg   [31:0] grp_LOADBYTES_2_fu_338_n;
wire   [63:0] grp_LOADBYTES_2_fu_338_ap_return;
wire    grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_ap_start;
wire    grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_ap_done;
wire    grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_ap_idle;
wire    grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_ap_ready;
wire   [5:0] grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_c_address0;
wire    grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_c_ce0;
wire    grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_c_we0;
wire   [7:0] grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_c_d0;
wire    grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_ap_start;
wire    grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_ap_done;
wire    grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_ap_idle;
wire    grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_ap_ready;
wire   [2:0] grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_s_address0;
wire    grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_s_ce0;
wire   [2:0] grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_st_address0;
wire    grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_st_ce0;
wire    grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_st_we0;
wire   [63:0] grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_st_d0;
wire   [4:0] and_ln_fu_494_p3;
reg   [4:0] ad_addr_0_lcssa_idx_reg_245;
wire   [60:0] and_ln77_1_fu_506_p3;
reg   [60:0] ap_phi_mux_adlen_addr_0_lcssa_phi_fu_260_p4;
reg   [60:0] adlen_addr_0_lcssa_reg_257;
wire   [60:0] and_ln104_1_fu_629_p3;
reg   [60:0] ap_phi_mux_mlen_addr_0_lcssa_phi_fu_270_p4;
reg   [60:0] mlen_addr_0_lcssa_reg_267;
wire   [5:0] and_ln1_fu_617_p3;
reg   [5:0] ap_phi_mux_m_addr_0_lcssa_idx_phi_fu_281_p4;
reg   [5:0] m_addr_0_lcssa_idx_reg_277;
reg   [3:0] i_reg_289;
wire   [0:0] icmp_ln28_fu_652_p2;
reg    grp_LOADBYTES_1_fu_300_ap_start_reg;
reg    grp_LOADBYTES_1_fu_308_ap_start_reg;
reg    grp_ROUND_fu_320_ap_start_reg;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state56;
wire    ap_CS_fsm_state64;
wire    ap_CS_fsm_state66;
wire    ap_CS_fsm_state68;
wire    ap_CS_fsm_state70;
wire    ap_CS_fsm_state72;
wire    ap_CS_fsm_state76;
wire    ap_CS_fsm_state78;
wire    ap_CS_fsm_state80;
wire    ap_CS_fsm_state82;
wire    ap_CS_fsm_state84;
wire    ap_CS_fsm_state86;
wire    ap_CS_fsm_state88;
wire    ap_CS_fsm_state90;
wire    ap_CS_fsm_state92;
wire    ap_CS_fsm_state94;
wire    ap_CS_fsm_state96;
wire    ap_CS_fsm_state98;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state63;
wire    ap_CS_fsm_state65;
wire    ap_CS_fsm_state67;
wire    ap_CS_fsm_state69;
wire    ap_CS_fsm_state71;
wire    ap_CS_fsm_state73;
wire    ap_CS_fsm_state77;
wire    ap_CS_fsm_state79;
wire    ap_CS_fsm_state81;
wire    ap_CS_fsm_state83;
wire    ap_CS_fsm_state85;
wire    ap_CS_fsm_state87;
wire    ap_CS_fsm_state89;
wire    ap_CS_fsm_state91;
wire    ap_CS_fsm_state93;
wire    ap_CS_fsm_state95;
wire    ap_CS_fsm_state97;
wire    ap_CS_fsm_state99;
reg    grp_LOADBYTES_2_fu_338_ap_start_reg;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state45;
reg    grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_ap_start_reg;
reg    grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_ap_start_reg;
wire    ap_CS_fsm_state102;
wire    ap_CS_fsm_state103;
wire   [63:0] zext_ln28_3_fu_706_p1;
reg   [63:0] ad_assign_fu_146;
wire   [63:0] add_ln84_fu_463_p2;
reg   [63:0] adlen_assign_fu_150;
wire   [63:0] add_ln85_fu_469_p2;
reg   [63:0] m_assign_fu_154;
wire   [63:0] add_ln113_fu_711_p2;
reg   [63:0] mlen_assign_fu_158;
wire   [63:0] add_ln114_fu_717_p2;
reg    ap_block_state2_on_subcall_done;
reg    ap_block_state4_on_subcall_done;
wire    ap_CS_fsm_state29;
wire   [63:0] grp_fu_366_p2;
wire   [63:0] grp_fu_372_p2;
wire   [63:0] xor_ln89_fu_546_p2;
wire    ap_CS_fsm_state58;
wire   [63:0] xor_ln97_fu_553_p2;
wire   [63:0] xor_ln119_fu_758_p2;
wire    ap_CS_fsm_state75;
wire   [63:0] xor_ln127_fu_765_p2;
wire   [63:0] xor_ln128_fu_770_p2;
wire    ap_CS_fsm_state100;
wire    ap_CS_fsm_state101;
wire   [7:0] trunc_ln28_1_fu_691_p1;
wire   [60:0] tmp_5_fu_410_p4;
wire   [60:0] tmp_7_fu_439_p4;
wire   [1:0] tmp_4_fu_485_p4;
wire   [2:0] trunc_ln77_fu_503_p1;
wire   [63:0] shl_ln_fu_520_p3;
wire   [63:0] sub_ln89_fu_528_p2;
wire   [63:0] shl_ln89_fu_534_p2;
wire   [63:0] xor_ln89_1_fu_540_p2;
wire   [60:0] tmp_8_fu_560_p4;
wire   [60:0] tmp_9_fu_587_p4;
wire   [2:0] tmp_6_fu_608_p4;
wire   [2:0] trunc_ln104_fu_626_p1;
wire   [2:0] trunc_ln28_fu_664_p1;
wire   [5:0] shl_ln1_fu_668_p3;
wire   [5:0] sub_ln28_fu_676_p2;
wire   [63:0] zext_ln28_2_fu_682_p1;
wire   [63:0] lshr_ln28_fu_686_p2;
wire   [5:0] zext_ln28_fu_648_p1;
wire   [5:0] trunc_ln104_2_fu_696_p1;
wire   [5:0] add_ln28_fu_700_p2;
wire   [63:0] shl_ln2_fu_738_p3;
wire   [63:0] sub_ln119_fu_746_p2;
wire   [63:0] shl_ln119_fu_752_p2;
reg   [102:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
reg    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
reg    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
reg    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
reg    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
reg    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
reg    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
reg    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
reg    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
reg    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
reg    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
reg    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
reg    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
reg    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
reg    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
reg    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
reg    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
reg    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
reg    ap_ST_fsm_state44_blk;
reg    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
reg    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
reg    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
reg    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
reg    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
reg    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
reg    ap_block_state57_on_subcall_done;
reg    ap_ST_fsm_state57_blk;
wire    ap_ST_fsm_state58_blk;
wire    ap_ST_fsm_state59_blk;
wire    ap_ST_fsm_state60_blk;
reg    ap_ST_fsm_state61_blk;
wire    ap_ST_fsm_state62_blk;
reg    ap_ST_fsm_state63_blk;
wire    ap_ST_fsm_state64_blk;
reg    ap_ST_fsm_state65_blk;
wire    ap_ST_fsm_state66_blk;
reg    ap_ST_fsm_state67_blk;
wire    ap_ST_fsm_state68_blk;
reg    ap_ST_fsm_state69_blk;
wire    ap_ST_fsm_state70_blk;
reg    ap_ST_fsm_state71_blk;
wire    ap_ST_fsm_state72_blk;
reg    ap_ST_fsm_state73_blk;
reg    ap_ST_fsm_state74_blk;
wire    ap_ST_fsm_state75_blk;
wire    ap_ST_fsm_state76_blk;
reg    ap_block_state77_on_subcall_done;
reg    ap_ST_fsm_state77_blk;
wire    ap_ST_fsm_state78_blk;
reg    ap_ST_fsm_state79_blk;
wire    ap_ST_fsm_state80_blk;
reg    ap_ST_fsm_state81_blk;
wire    ap_ST_fsm_state82_blk;
reg    ap_ST_fsm_state83_blk;
wire    ap_ST_fsm_state84_blk;
reg    ap_ST_fsm_state85_blk;
wire    ap_ST_fsm_state86_blk;
reg    ap_ST_fsm_state87_blk;
wire    ap_ST_fsm_state88_blk;
reg    ap_ST_fsm_state89_blk;
wire    ap_ST_fsm_state90_blk;
reg    ap_ST_fsm_state91_blk;
wire    ap_ST_fsm_state92_blk;
reg    ap_ST_fsm_state93_blk;
wire    ap_ST_fsm_state94_blk;
reg    ap_ST_fsm_state95_blk;
wire    ap_ST_fsm_state96_blk;
reg    ap_ST_fsm_state97_blk;
wire    ap_ST_fsm_state98_blk;
reg    ap_ST_fsm_state99_blk;
wire    ap_ST_fsm_state100_blk;
wire    ap_ST_fsm_state101_blk;
wire    ap_ST_fsm_state102_blk;
reg    ap_ST_fsm_state103_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 103'd1;
#0 grp_LOADBYTES_1_fu_300_ap_start_reg = 1'b0;
#0 grp_LOADBYTES_1_fu_308_ap_start_reg = 1'b0;
#0 grp_ROUND_fu_320_ap_start_reg = 1'b0;
#0 grp_LOADBYTES_2_fu_338_ap_start_reg = 1'b0;
#0 grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_ap_start_reg = 1'b0;
#0 grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_ap_start_reg = 1'b0;
end

crypto_aead_encrypt_h_crypto_aead_encrypt_1_s_RAM_AUTO_1R1W #(
    .DataWidth( 64 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(s_address0),
    .ce0(s_ce0),
    .we0(s_we0),
    .d0(s_d0),
    .q0(s_q0),
    .address1(s_address1),
    .ce1(s_ce1),
    .we1(s_we1),
    .d1(s_d1),
    .q1(s_q1)
);

crypto_aead_encrypt_h_LOADBYTES_1 grp_LOADBYTES_1_fu_300(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_LOADBYTES_1_fu_300_ap_start),
    .ap_done(grp_LOADBYTES_1_fu_300_ap_done),
    .ap_idle(grp_LOADBYTES_1_fu_300_ap_idle),
    .ap_ready(grp_LOADBYTES_1_fu_300_ap_ready),
    .k_address0(grp_LOADBYTES_1_fu_300_k_address0),
    .k_ce0(grp_LOADBYTES_1_fu_300_k_ce0),
    .k_q0(k_q0),
    .bytes(grp_LOADBYTES_1_fu_300_bytes),
    .ap_return(grp_LOADBYTES_1_fu_300_ap_return)
);

crypto_aead_encrypt_h_LOADBYTES_1 grp_LOADBYTES_1_fu_308(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_LOADBYTES_1_fu_308_ap_start),
    .ap_done(grp_LOADBYTES_1_fu_308_ap_done),
    .ap_idle(grp_LOADBYTES_1_fu_308_ap_idle),
    .ap_ready(grp_LOADBYTES_1_fu_308_ap_ready),
    .k_address0(grp_LOADBYTES_1_fu_308_k_address0),
    .k_ce0(grp_LOADBYTES_1_fu_308_k_ce0),
    .k_q0(npub_q0),
    .bytes(grp_LOADBYTES_1_fu_308_bytes),
    .ap_return(grp_LOADBYTES_1_fu_308_ap_return)
);

crypto_aead_encrypt_h_ROUND grp_ROUND_fu_320(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_ROUND_fu_320_ap_start),
    .ap_done(grp_ROUND_fu_320_ap_done),
    .ap_idle(grp_ROUND_fu_320_ap_idle),
    .ap_ready(grp_ROUND_fu_320_ap_ready),
    .s_address0(grp_ROUND_fu_320_s_address0),
    .s_ce0(grp_ROUND_fu_320_s_ce0),
    .s_we0(grp_ROUND_fu_320_s_we0),
    .s_d0(grp_ROUND_fu_320_s_d0),
    .s_q0(s_q0),
    .s_address1(grp_ROUND_fu_320_s_address1),
    .s_ce1(grp_ROUND_fu_320_s_ce1),
    .s_we1(grp_ROUND_fu_320_s_we1),
    .s_d1(grp_ROUND_fu_320_s_d1),
    .s_q1(s_q1),
    .C(grp_ROUND_fu_320_C)
);

crypto_aead_encrypt_h_LOADBYTES_2 grp_LOADBYTES_2_fu_338(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_LOADBYTES_2_fu_338_ap_start),
    .ap_done(grp_LOADBYTES_2_fu_338_ap_done),
    .ap_idle(grp_LOADBYTES_2_fu_338_ap_idle),
    .ap_ready(grp_LOADBYTES_2_fu_338_ap_ready),
    .ad_address0(grp_LOADBYTES_2_fu_338_ad_address0),
    .ad_ce0(grp_LOADBYTES_2_fu_338_ad_ce0),
    .ad_q0(grp_LOADBYTES_2_fu_338_ad_q0),
    .bytes(grp_LOADBYTES_2_fu_338_bytes),
    .n(grp_LOADBYTES_2_fu_338_n),
    .ap_return(grp_LOADBYTES_2_fu_338_ap_return)
);

crypto_aead_encrypt_h_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1 grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_ap_start),
    .ap_done(grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_ap_done),
    .ap_idle(grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_ap_idle),
    .ap_ready(grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_ap_ready),
    .n_assign(trunc_ln117_1_reg_911),
    .xor_ln117(xor_ln117_reg_930),
    .m_addr_0_lcssa_idx(m_addr_0_lcssa_idx_reg_277),
    .c_address0(grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_c_address0),
    .c_ce0(grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_c_ce0),
    .c_we0(grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_c_we0),
    .c_d0(grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_c_d0)
);

crypto_aead_encrypt_h_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1 grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_ap_start),
    .ap_done(grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_ap_done),
    .ap_idle(grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_ap_idle),
    .ap_ready(grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_ap_ready),
    .s_address0(grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_s_address0),
    .s_ce0(grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_s_ce0),
    .s_q0(s_q0),
    .st_address0(grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_st_address0),
    .st_ce0(grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_st_ce0),
    .st_we0(grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_st_we0),
    .st_d0(grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_st_d0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_LOADBYTES_1_fu_300_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
            grp_LOADBYTES_1_fu_300_ap_start_reg <= 1'b1;
        end else if ((grp_LOADBYTES_1_fu_300_ap_ready == 1'b1)) begin
            grp_LOADBYTES_1_fu_300_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_LOADBYTES_1_fu_308_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
            grp_LOADBYTES_1_fu_308_ap_start_reg <= 1'b1;
        end else if ((grp_LOADBYTES_1_fu_308_ap_ready == 1'b1)) begin
            grp_LOADBYTES_1_fu_308_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_LOADBYTES_2_fu_338_ap_start_reg <= 1'b0;
    end else begin
        if ((((icmp_ln104_1_fu_597_p2 == 1'd0) & (icmp_ln104_reg_877 == 1'd0) & (1'b1 == ap_CS_fsm_state60)) | ((1'b1 == ap_CS_fsm_state60) & ((icmp_ln104_1_fu_597_p2 == 1'd1) | (icmp_ln104_reg_877 == 1'd1))) | ((icmp_ln77_1_fu_449_p2 == 1'd0) & (icmp_ln77_reg_846 == 1'd0) & (1'b1 == ap_CS_fsm_state31)) | ((1'b1 == ap_CS_fsm_state31) & ((icmp_ln77_1_fu_449_p2 == 1'd1) | (icmp_ln77_reg_846 == 1'd1))))) begin
            grp_LOADBYTES_2_fu_338_ap_start_reg <= 1'b1;
        end else if ((grp_LOADBYTES_2_fu_338_ap_ready == 1'b1)) begin
            grp_LOADBYTES_2_fu_338_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_ROUND_fu_320_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | ((icmp_ln28_fu_652_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state62)))) begin
            grp_ROUND_fu_320_ap_start_reg <= 1'b1;
        end else if ((grp_ROUND_fu_320_ap_ready == 1'b1)) begin
            grp_ROUND_fu_320_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state102)) begin
            grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_ap_start_reg <= 1'b1;
        end else if ((grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_ap_ready == 1'b1)) begin
            grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state76)) begin
            grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_ap_start_reg <= 1'b1;
        end else if ((grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_ap_ready == 1'b1)) begin
            grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln77_fu_420_p2 == 1'd1) & (icmp_ln75_fu_404_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state30))) begin
                ad_addr_0_lcssa_idx_reg_245[3] <= 1'b0;
        ad_addr_0_lcssa_idx_reg_245[4] <= 1'b0;
    end else if (((icmp_ln77_1_fu_449_p2 == 1'd1) & (icmp_ln77_reg_846 == 1'd0) & (1'b1 == ap_CS_fsm_state31))) begin
                ad_addr_0_lcssa_idx_reg_245[4 : 3] <= and_ln_fu_494_p3[4 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln77_fu_420_p2 == 1'd0) & (icmp_ln75_fu_404_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state30))) begin
        ad_assign_fu_146 <= 64'd0;
    end else if (((icmp_ln77_1_fu_449_p2 == 1'd0) & (icmp_ln77_reg_846 == 1'd0) & (1'b1 == ap_CS_fsm_state31))) begin
        ad_assign_fu_146 <= add_ln84_fu_463_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln77_fu_420_p2 == 1'd1) & (icmp_ln75_fu_404_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state30))) begin
        adlen_addr_0_lcssa_reg_257 <= empty_fu_389_p1;
    end else if (((icmp_ln77_1_fu_449_p2 == 1'd1) & (icmp_ln77_reg_846 == 1'd0) & (1'b1 == ap_CS_fsm_state31))) begin
        adlen_addr_0_lcssa_reg_257 <= and_ln77_1_fu_506_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln77_fu_420_p2 == 1'd0) & (icmp_ln75_fu_404_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state30))) begin
        adlen_assign_fu_150 <= adlen;
    end else if (((icmp_ln77_1_fu_449_p2 == 1'd0) & (icmp_ln77_reg_846 == 1'd0) & (1'b1 == ap_CS_fsm_state31))) begin
        adlen_assign_fu_150 <= add_ln85_fu_469_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_LOADBYTES_2_fu_338_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state61))) begin
        i_reg_289 <= 4'd0;
    end else if (((icmp_ln28_fu_652_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state62))) begin
        i_reg_289 <= add_ln28_1_fu_658_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln104_fu_569_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state59))) begin
                m_addr_0_lcssa_idx_reg_277[3] <= 1'b0;
        m_addr_0_lcssa_idx_reg_277[4] <= 1'b0;
        m_addr_0_lcssa_idx_reg_277[5] <= 1'b0;
    end else if (((icmp_ln104_1_fu_597_p2 == 1'd1) & (icmp_ln104_reg_877 == 1'd0) & (1'b1 == ap_CS_fsm_state60))) begin
                m_addr_0_lcssa_idx_reg_277[5 : 3] <= and_ln1_fu_617_p3[5 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln104_fu_569_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state59))) begin
        m_assign_fu_154 <= 64'd0;
    end else if (((icmp_ln28_fu_652_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state62))) begin
        m_assign_fu_154 <= add_ln113_fu_711_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln104_fu_569_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state59))) begin
        mlen_addr_0_lcssa_reg_267 <= empty_13_reg_837;
    end else if (((icmp_ln104_1_fu_597_p2 == 1'd1) & (icmp_ln104_reg_877 == 1'd0) & (1'b1 == ap_CS_fsm_state60))) begin
        mlen_addr_0_lcssa_reg_267 <= and_ln104_1_fu_629_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln104_fu_569_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state59))) begin
        mlen_assign_fu_158 <= mlen;
    end else if (((icmp_ln28_fu_652_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state62))) begin
        mlen_assign_fu_158 <= add_ln114_fu_717_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        K0_reg_782 <= grp_LOADBYTES_1_fu_300_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        K1_reg_800 <= grp_LOADBYTES_1_fu_300_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        empty_13_reg_837 <= empty_13_fu_393_p1;
        icmp_ln75_reg_842 <= icmp_ln75_fu_404_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        icmp_ln104_reg_877 <= icmp_ln104_fu_569_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln75_fu_404_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state30))) begin
        icmp_ln77_reg_846 <= icmp_ln77_fu_420_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        s_load_3_reg_935 <= s_q1;
        xor_ln117_reg_930 <= xor_ln117_fu_732_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln104_1_fu_597_p2 == 1'd0) & (icmp_ln104_reg_877 == 1'd0) & (1'b1 == ap_CS_fsm_state60))) begin
        trunc_ln104_1_reg_901 <= trunc_ln104_1_fu_603_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state60) & ((icmp_ln104_1_fu_597_p2 == 1'd1) | (icmp_ln104_reg_877 == 1'd1)))) begin
        trunc_ln117_1_reg_911 <= trunc_ln117_1_fu_643_p1;
        trunc_ln117_reg_906[4 : 3] <= trunc_ln117_fu_638_p1[4 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln77_1_fu_449_p2 == 1'd0) & (icmp_ln77_reg_846 == 1'd0) & (1'b1 == ap_CS_fsm_state31))) begin
        trunc_ln77_1_reg_867 <= trunc_ln77_1_fu_458_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state31) & ((icmp_ln77_1_fu_449_p2 == 1'd1) | (icmp_ln77_reg_846 == 1'd1)))) begin
        trunc_ln88_reg_872 <= trunc_ln88_fu_515_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        xor_ln105_reg_917 <= grp_fu_378_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state32))) begin
        ad_ce0 = grp_LOADBYTES_2_fu_338_ad_ce0;
    end else begin
        ad_ce0 = 1'b0;
    end
end

assign ap_ST_fsm_state100_blk = 1'b0;

assign ap_ST_fsm_state101_blk = 1'b0;

assign ap_ST_fsm_state102_blk = 1'b0;

always @ (*) begin
    if ((grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_ap_done == 1'b0)) begin
        ap_ST_fsm_state103_blk = 1'b1;
    end else begin
        ap_ST_fsm_state103_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_ROUND_fu_320_ap_done == 1'b0)) begin
        ap_ST_fsm_state10_blk = 1'b1;
    end else begin
        ap_ST_fsm_state10_blk = 1'b0;
    end
end

assign ap_ST_fsm_state11_blk = 1'b0;

always @ (*) begin
    if ((grp_ROUND_fu_320_ap_done == 1'b0)) begin
        ap_ST_fsm_state12_blk = 1'b1;
    end else begin
        ap_ST_fsm_state12_blk = 1'b0;
    end
end

assign ap_ST_fsm_state13_blk = 1'b0;

always @ (*) begin
    if ((grp_ROUND_fu_320_ap_done == 1'b0)) begin
        ap_ST_fsm_state14_blk = 1'b1;
    end else begin
        ap_ST_fsm_state14_blk = 1'b0;
    end
end

assign ap_ST_fsm_state15_blk = 1'b0;

always @ (*) begin
    if ((grp_ROUND_fu_320_ap_done == 1'b0)) begin
        ap_ST_fsm_state16_blk = 1'b1;
    end else begin
        ap_ST_fsm_state16_blk = 1'b0;
    end
end

assign ap_ST_fsm_state17_blk = 1'b0;

always @ (*) begin
    if ((grp_ROUND_fu_320_ap_done == 1'b0)) begin
        ap_ST_fsm_state18_blk = 1'b1;
    end else begin
        ap_ST_fsm_state18_blk = 1'b0;
    end
end

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_ROUND_fu_320_ap_done == 1'b0)) begin
        ap_ST_fsm_state20_blk = 1'b1;
    end else begin
        ap_ST_fsm_state20_blk = 1'b0;
    end
end

assign ap_ST_fsm_state21_blk = 1'b0;

always @ (*) begin
    if ((grp_ROUND_fu_320_ap_done == 1'b0)) begin
        ap_ST_fsm_state22_blk = 1'b1;
    end else begin
        ap_ST_fsm_state22_blk = 1'b0;
    end
end

assign ap_ST_fsm_state23_blk = 1'b0;

always @ (*) begin
    if ((grp_ROUND_fu_320_ap_done == 1'b0)) begin
        ap_ST_fsm_state24_blk = 1'b1;
    end else begin
        ap_ST_fsm_state24_blk = 1'b0;
    end
end

assign ap_ST_fsm_state25_blk = 1'b0;

always @ (*) begin
    if ((grp_ROUND_fu_320_ap_done == 1'b0)) begin
        ap_ST_fsm_state26_blk = 1'b1;
    end else begin
        ap_ST_fsm_state26_blk = 1'b0;
    end
end

assign ap_ST_fsm_state27_blk = 1'b0;

always @ (*) begin
    if ((grp_ROUND_fu_320_ap_done == 1'b0)) begin
        ap_ST_fsm_state28_blk = 1'b1;
    end else begin
        ap_ST_fsm_state28_blk = 1'b0;
    end
end

assign ap_ST_fsm_state29_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state2_on_subcall_done)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

always @ (*) begin
    if ((grp_LOADBYTES_2_fu_338_ap_done == 1'b0)) begin
        ap_ST_fsm_state32_blk = 1'b1;
    end else begin
        ap_ST_fsm_state32_blk = 1'b0;
    end
end

assign ap_ST_fsm_state33_blk = 1'b0;

always @ (*) begin
    if ((grp_ROUND_fu_320_ap_done == 1'b0)) begin
        ap_ST_fsm_state34_blk = 1'b1;
    end else begin
        ap_ST_fsm_state34_blk = 1'b0;
    end
end

assign ap_ST_fsm_state35_blk = 1'b0;

always @ (*) begin
    if ((grp_ROUND_fu_320_ap_done == 1'b0)) begin
        ap_ST_fsm_state36_blk = 1'b1;
    end else begin
        ap_ST_fsm_state36_blk = 1'b0;
    end
end

assign ap_ST_fsm_state37_blk = 1'b0;

always @ (*) begin
    if ((grp_ROUND_fu_320_ap_done == 1'b0)) begin
        ap_ST_fsm_state38_blk = 1'b1;
    end else begin
        ap_ST_fsm_state38_blk = 1'b0;
    end
end

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_ROUND_fu_320_ap_done == 1'b0)) begin
        ap_ST_fsm_state40_blk = 1'b1;
    end else begin
        ap_ST_fsm_state40_blk = 1'b0;
    end
end

assign ap_ST_fsm_state41_blk = 1'b0;

always @ (*) begin
    if ((grp_ROUND_fu_320_ap_done == 1'b0)) begin
        ap_ST_fsm_state42_blk = 1'b1;
    end else begin
        ap_ST_fsm_state42_blk = 1'b0;
    end
end

assign ap_ST_fsm_state43_blk = 1'b0;

always @ (*) begin
    if ((grp_ROUND_fu_320_ap_done == 1'b0)) begin
        ap_ST_fsm_state44_blk = 1'b1;
    end else begin
        ap_ST_fsm_state44_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_LOADBYTES_2_fu_338_ap_done == 1'b0)) begin
        ap_ST_fsm_state45_blk = 1'b1;
    end else begin
        ap_ST_fsm_state45_blk = 1'b0;
    end
end

assign ap_ST_fsm_state46_blk = 1'b0;

always @ (*) begin
    if ((grp_ROUND_fu_320_ap_done == 1'b0)) begin
        ap_ST_fsm_state47_blk = 1'b1;
    end else begin
        ap_ST_fsm_state47_blk = 1'b0;
    end
end

assign ap_ST_fsm_state48_blk = 1'b0;

always @ (*) begin
    if ((grp_ROUND_fu_320_ap_done == 1'b0)) begin
        ap_ST_fsm_state49_blk = 1'b1;
    end else begin
        ap_ST_fsm_state49_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state4_on_subcall_done)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

assign ap_ST_fsm_state50_blk = 1'b0;

always @ (*) begin
    if ((grp_ROUND_fu_320_ap_done == 1'b0)) begin
        ap_ST_fsm_state51_blk = 1'b1;
    end else begin
        ap_ST_fsm_state51_blk = 1'b0;
    end
end

assign ap_ST_fsm_state52_blk = 1'b0;

always @ (*) begin
    if ((grp_ROUND_fu_320_ap_done == 1'b0)) begin
        ap_ST_fsm_state53_blk = 1'b1;
    end else begin
        ap_ST_fsm_state53_blk = 1'b0;
    end
end

assign ap_ST_fsm_state54_blk = 1'b0;

always @ (*) begin
    if ((grp_ROUND_fu_320_ap_done == 1'b0)) begin
        ap_ST_fsm_state55_blk = 1'b1;
    end else begin
        ap_ST_fsm_state55_blk = 1'b0;
    end
end

assign ap_ST_fsm_state56_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state57_on_subcall_done)) begin
        ap_ST_fsm_state57_blk = 1'b1;
    end else begin
        ap_ST_fsm_state57_blk = 1'b0;
    end
end

assign ap_ST_fsm_state58_blk = 1'b0;

assign ap_ST_fsm_state59_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state60_blk = 1'b0;

always @ (*) begin
    if ((grp_LOADBYTES_2_fu_338_ap_done == 1'b0)) begin
        ap_ST_fsm_state61_blk = 1'b1;
    end else begin
        ap_ST_fsm_state61_blk = 1'b0;
    end
end

assign ap_ST_fsm_state62_blk = 1'b0;

always @ (*) begin
    if ((grp_ROUND_fu_320_ap_done == 1'b0)) begin
        ap_ST_fsm_state63_blk = 1'b1;
    end else begin
        ap_ST_fsm_state63_blk = 1'b0;
    end
end

assign ap_ST_fsm_state64_blk = 1'b0;

always @ (*) begin
    if ((grp_ROUND_fu_320_ap_done == 1'b0)) begin
        ap_ST_fsm_state65_blk = 1'b1;
    end else begin
        ap_ST_fsm_state65_blk = 1'b0;
    end
end

assign ap_ST_fsm_state66_blk = 1'b0;

always @ (*) begin
    if ((grp_ROUND_fu_320_ap_done == 1'b0)) begin
        ap_ST_fsm_state67_blk = 1'b1;
    end else begin
        ap_ST_fsm_state67_blk = 1'b0;
    end
end

assign ap_ST_fsm_state68_blk = 1'b0;

always @ (*) begin
    if ((grp_ROUND_fu_320_ap_done == 1'b0)) begin
        ap_ST_fsm_state69_blk = 1'b1;
    end else begin
        ap_ST_fsm_state69_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_ROUND_fu_320_ap_done == 1'b0)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

assign ap_ST_fsm_state70_blk = 1'b0;

always @ (*) begin
    if ((grp_ROUND_fu_320_ap_done == 1'b0)) begin
        ap_ST_fsm_state71_blk = 1'b1;
    end else begin
        ap_ST_fsm_state71_blk = 1'b0;
    end
end

assign ap_ST_fsm_state72_blk = 1'b0;

always @ (*) begin
    if ((grp_ROUND_fu_320_ap_done == 1'b0)) begin
        ap_ST_fsm_state73_blk = 1'b1;
    end else begin
        ap_ST_fsm_state73_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_LOADBYTES_2_fu_338_ap_done == 1'b0)) begin
        ap_ST_fsm_state74_blk = 1'b1;
    end else begin
        ap_ST_fsm_state74_blk = 1'b0;
    end
end

assign ap_ST_fsm_state75_blk = 1'b0;

assign ap_ST_fsm_state76_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state77_on_subcall_done)) begin
        ap_ST_fsm_state77_blk = 1'b1;
    end else begin
        ap_ST_fsm_state77_blk = 1'b0;
    end
end

assign ap_ST_fsm_state78_blk = 1'b0;

always @ (*) begin
    if ((grp_ROUND_fu_320_ap_done == 1'b0)) begin
        ap_ST_fsm_state79_blk = 1'b1;
    end else begin
        ap_ST_fsm_state79_blk = 1'b0;
    end
end

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state80_blk = 1'b0;

always @ (*) begin
    if ((grp_ROUND_fu_320_ap_done == 1'b0)) begin
        ap_ST_fsm_state81_blk = 1'b1;
    end else begin
        ap_ST_fsm_state81_blk = 1'b0;
    end
end

assign ap_ST_fsm_state82_blk = 1'b0;

always @ (*) begin
    if ((grp_ROUND_fu_320_ap_done == 1'b0)) begin
        ap_ST_fsm_state83_blk = 1'b1;
    end else begin
        ap_ST_fsm_state83_blk = 1'b0;
    end
end

assign ap_ST_fsm_state84_blk = 1'b0;

always @ (*) begin
    if ((grp_ROUND_fu_320_ap_done == 1'b0)) begin
        ap_ST_fsm_state85_blk = 1'b1;
    end else begin
        ap_ST_fsm_state85_blk = 1'b0;
    end
end

assign ap_ST_fsm_state86_blk = 1'b0;

always @ (*) begin
    if ((grp_ROUND_fu_320_ap_done == 1'b0)) begin
        ap_ST_fsm_state87_blk = 1'b1;
    end else begin
        ap_ST_fsm_state87_blk = 1'b0;
    end
end

assign ap_ST_fsm_state88_blk = 1'b0;

always @ (*) begin
    if ((grp_ROUND_fu_320_ap_done == 1'b0)) begin
        ap_ST_fsm_state89_blk = 1'b1;
    end else begin
        ap_ST_fsm_state89_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_ROUND_fu_320_ap_done == 1'b0)) begin
        ap_ST_fsm_state8_blk = 1'b1;
    end else begin
        ap_ST_fsm_state8_blk = 1'b0;
    end
end

assign ap_ST_fsm_state90_blk = 1'b0;

always @ (*) begin
    if ((grp_ROUND_fu_320_ap_done == 1'b0)) begin
        ap_ST_fsm_state91_blk = 1'b1;
    end else begin
        ap_ST_fsm_state91_blk = 1'b0;
    end
end

assign ap_ST_fsm_state92_blk = 1'b0;

always @ (*) begin
    if ((grp_ROUND_fu_320_ap_done == 1'b0)) begin
        ap_ST_fsm_state93_blk = 1'b1;
    end else begin
        ap_ST_fsm_state93_blk = 1'b0;
    end
end

assign ap_ST_fsm_state94_blk = 1'b0;

always @ (*) begin
    if ((grp_ROUND_fu_320_ap_done == 1'b0)) begin
        ap_ST_fsm_state95_blk = 1'b1;
    end else begin
        ap_ST_fsm_state95_blk = 1'b0;
    end
end

assign ap_ST_fsm_state96_blk = 1'b0;

always @ (*) begin
    if ((grp_ROUND_fu_320_ap_done == 1'b0)) begin
        ap_ST_fsm_state97_blk = 1'b1;
    end else begin
        ap_ST_fsm_state97_blk = 1'b0;
    end
end

assign ap_ST_fsm_state98_blk = 1'b0;

always @ (*) begin
    if ((grp_ROUND_fu_320_ap_done == 1'b0)) begin
        ap_ST_fsm_state99_blk = 1'b1;
    end else begin
        ap_ST_fsm_state99_blk = 1'b0;
    end
end

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state103)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln77_1_fu_449_p2 == 1'd1) & (icmp_ln77_reg_846 == 1'd0) & (1'b1 == ap_CS_fsm_state31))) begin
        ap_phi_mux_adlen_addr_0_lcssa_phi_fu_260_p4 = and_ln77_1_fu_506_p3;
    end else begin
        ap_phi_mux_adlen_addr_0_lcssa_phi_fu_260_p4 = adlen_addr_0_lcssa_reg_257;
    end
end

always @ (*) begin
    if (((icmp_ln104_1_fu_597_p2 == 1'd1) & (icmp_ln104_reg_877 == 1'd0) & (1'b1 == ap_CS_fsm_state60))) begin
        ap_phi_mux_m_addr_0_lcssa_idx_phi_fu_281_p4 = and_ln1_fu_617_p3;
    end else begin
        ap_phi_mux_m_addr_0_lcssa_idx_phi_fu_281_p4 = m_addr_0_lcssa_idx_reg_277;
    end
end

always @ (*) begin
    if (((icmp_ln104_1_fu_597_p2 == 1'd1) & (icmp_ln104_reg_877 == 1'd0) & (1'b1 == ap_CS_fsm_state60))) begin
        ap_phi_mux_mlen_addr_0_lcssa_phi_fu_270_p4 = and_ln104_1_fu_629_p3;
    end else begin
        ap_phi_mux_mlen_addr_0_lcssa_phi_fu_270_p4 = mlen_addr_0_lcssa_reg_267;
    end
end

always @ (*) begin
    if (((grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state103))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        c_address0 = zext_ln28_3_fu_706_p1;
    end else if ((1'b1 == ap_CS_fsm_state77)) begin
        c_address0 = grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_c_address0;
    end else begin
        c_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        c_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state77)) begin
        c_ce0 = grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_c_ce0;
    end else begin
        c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        c_d0 = trunc_ln28_1_fu_691_p1;
    end else if ((1'b1 == ap_CS_fsm_state77)) begin
        c_d0 = grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_c_d0;
    end else begin
        c_d0 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln28_fu_652_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state62))) begin
        c_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state77)) begin
        c_we0 = grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_c_we0;
    end else begin
        c_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        clen_ap_vld = 1'b1;
    end else begin
        clen_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_LOADBYTES_1_fu_300_bytes = 4'd8;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_LOADBYTES_1_fu_300_bytes = 4'd0;
    end else begin
        grp_LOADBYTES_1_fu_300_bytes = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_LOADBYTES_1_fu_308_bytes = 4'd8;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_LOADBYTES_1_fu_308_bytes = 4'd0;
    end else begin
        grp_LOADBYTES_1_fu_308_bytes = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state61))) begin
        grp_LOADBYTES_2_fu_338_ad_q0 = m_q0;
    end else if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state32))) begin
        grp_LOADBYTES_2_fu_338_ad_q0 = ad_q0;
    end else begin
        grp_LOADBYTES_2_fu_338_ad_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        grp_LOADBYTES_2_fu_338_bytes = trunc_ln117_reg_906;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        grp_LOADBYTES_2_fu_338_bytes = trunc_ln104_1_reg_901;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        grp_LOADBYTES_2_fu_338_bytes = ad_addr_0_lcssa_idx_reg_245;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_LOADBYTES_2_fu_338_bytes = trunc_ln77_1_reg_867;
    end else begin
        grp_LOADBYTES_2_fu_338_bytes = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        grp_LOADBYTES_2_fu_338_n = trunc_ln117_1_reg_911;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        grp_LOADBYTES_2_fu_338_n = trunc_ln88_reg_872;
    end else if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state61))) begin
        grp_LOADBYTES_2_fu_338_n = 32'd8;
    end else begin
        grp_LOADBYTES_2_fu_338_n = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state28) | ((icmp_ln75_reg_842 == 1'd0) & (1'b1 == ap_CS_fsm_state57)))) begin
        grp_ROUND_fu_320_C = 8'd75;
    end else if (((1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state26))) begin
        grp_ROUND_fu_320_C = 8'd90;
    end else if (((1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state24))) begin
        grp_ROUND_fu_320_C = 8'd105;
    end else if (((1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_ROUND_fu_320_C = 8'd120;
    end else if (((1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state20))) begin
        grp_ROUND_fu_320_C = 8'd135;
    end else if (((1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state18))) begin
        grp_ROUND_fu_320_C = 8'd150;
    end else if (((1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state16))) begin
        grp_ROUND_fu_320_C = 8'd165;
    end else if (((1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state14))) begin
        grp_ROUND_fu_320_C = 8'd180;
    end else if (((1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state12))) begin
        grp_ROUND_fu_320_C = 8'd195;
    end else if (((1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_ROUND_fu_320_C = 8'd210;
    end else if (((1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state8))) begin
        grp_ROUND_fu_320_C = 8'd225;
    end else if (((1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state6))) begin
        grp_ROUND_fu_320_C = 8'd240;
    end else begin
        grp_ROUND_fu_320_C = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        k_ce0 = grp_LOADBYTES_1_fu_300_k_ce0;
    end else begin
        k_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state61))) begin
        m_ce0 = grp_LOADBYTES_2_fu_338_ad_ce0;
    end else begin
        m_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        npub_ce0 = grp_LOADBYTES_1_fu_308_k_ce0;
    end else begin
        npub_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        s_address0 = s_addr_1_reg_794;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        s_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        s_address0 = s_addr_4_reg_812;
    end else if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60))) begin
        s_address0 = s_addr_reg_776;
    end else if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state29))) begin
        s_address0 = s_addr_3_reg_789;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        s_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        s_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        s_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        s_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state103)) begin
        s_address0 = grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_s_address0;
    end else if (((1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | ((icmp_ln75_reg_842 == 1'd0) & (1'b1 == ap_CS_fsm_state57)))) begin
        s_address0 = grp_ROUND_fu_320_s_address0;
    end else begin
        s_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        s_address1 = s_addr_2_reg_806;
    end else if (((1'b1 == ap_CS_fsm_state60) & ((icmp_ln104_1_fu_597_p2 == 1'd1) | (icmp_ln104_reg_877 == 1'd1)))) begin
        s_address1 = 64'd1;
    end else if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state74) | ((icmp_ln104_1_fu_597_p2 == 1'd0) & (icmp_ln104_reg_877 == 1'd0) & (1'b1 == ap_CS_fsm_state60)) | ((icmp_ln77_1_fu_449_p2 == 1'd0) & (icmp_ln77_reg_846 == 1'd0) & (1'b1 == ap_CS_fsm_state31)) | ((1'b1 == ap_CS_fsm_state31) & ((icmp_ln77_1_fu_449_p2 == 1'd1) | (icmp_ln77_reg_846 == 1'd1))))) begin
        s_address1 = 64'd0;
    end else if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state29))) begin
        s_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        s_address1 = 64'd2;
    end else if (((1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | ((icmp_ln75_reg_842 == 1'd0) & (1'b1 == ap_CS_fsm_state57)))) begin
        s_address1 = grp_ROUND_fu_320_s_address1;
    end else begin
        s_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state29) | ((grp_LOADBYTES_2_fu_338_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state45)) | ((grp_LOADBYTES_2_fu_338_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state74)) | ((grp_LOADBYTES_2_fu_338_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state61)) | ((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done)) | ((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        s_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state103)) begin
        s_ce0 = grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_s_ce0;
    end else if (((1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | ((icmp_ln75_reg_842 == 1'd0) & (1'b1 == ap_CS_fsm_state57)))) begin
        s_ce0 = grp_ROUND_fu_320_s_ce0;
    end else begin
        s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state29) | ((grp_LOADBYTES_2_fu_338_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state32)) | ((grp_LOADBYTES_2_fu_338_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state74)) | ((icmp_ln104_1_fu_597_p2 == 1'd0) & (icmp_ln104_reg_877 == 1'd0) & (1'b1 == ap_CS_fsm_state60)) | ((1'b1 == ap_CS_fsm_state60) & ((icmp_ln104_1_fu_597_p2 == 1'd1) | (icmp_ln104_reg_877 == 1'd1))) | ((icmp_ln77_1_fu_449_p2 == 1'd0) & (icmp_ln77_reg_846 == 1'd0) & (1'b1 == ap_CS_fsm_state31)) | ((1'b1 == ap_CS_fsm_state31) & ((icmp_ln77_1_fu_449_p2 == 1'd1) | (icmp_ln77_reg_846 == 1'd1))) | ((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done)))) begin
        s_ce1 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | ((icmp_ln75_reg_842 == 1'd0) & (1'b1 == ap_CS_fsm_state57)))) begin
        s_ce1 = grp_ROUND_fu_320_s_ce1;
    end else begin
        s_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        s_d0 = xor_ln127_fu_765_p2;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        s_d0 = grp_fu_378_p2;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        s_d0 = xor_ln97_fu_553_p2;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        s_d0 = xor_ln89_fu_546_p2;
    end else if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state101))) begin
        s_d0 = grp_fu_366_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        s_d0 = K0_reg_782;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        s_d0 = grp_LOADBYTES_1_fu_308_ap_return;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        s_d0 = 64'd9241399655273594880;
    end else if (((1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | ((icmp_ln75_reg_842 == 1'd0) & (1'b1 == ap_CS_fsm_state57)))) begin
        s_d0 = grp_ROUND_fu_320_s_d0;
    end else begin
        s_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        s_d1 = xor_ln128_fu_770_p2;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        s_d1 = xor_ln119_fu_758_p2;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        s_d1 = grp_fu_378_p2;
    end else if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state101))) begin
        s_d1 = grp_fu_372_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        s_d1 = grp_LOADBYTES_1_fu_300_ap_return;
    end else if (((1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | ((icmp_ln75_reg_842 == 1'd0) & (1'b1 == ap_CS_fsm_state57)))) begin
        s_d1 = grp_ROUND_fu_320_s_d1;
    end else begin
        s_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state75) | ((grp_LOADBYTES_2_fu_338_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state45)) | ((grp_LOADBYTES_2_fu_338_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state61)) | ((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done)) | ((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        s_we0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | ((icmp_ln75_reg_842 == 1'd0) & (1'b1 == ap_CS_fsm_state57)))) begin
        s_we0 = grp_ROUND_fu_320_s_we0;
    end else begin
        s_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state75) | ((grp_LOADBYTES_2_fu_338_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state32)) | ((grp_LOADBYTES_2_fu_338_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state74)) | ((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done)))) begin
        s_we1 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | ((icmp_ln75_reg_842 == 1'd0) & (1'b1 == ap_CS_fsm_state57)))) begin
        s_we1 = grp_ROUND_fu_320_s_we1;
    end else begin
        s_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((grp_ROUND_fu_320_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((grp_ROUND_fu_320_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((grp_ROUND_fu_320_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((grp_ROUND_fu_320_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((grp_ROUND_fu_320_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((grp_ROUND_fu_320_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((grp_ROUND_fu_320_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            if (((grp_ROUND_fu_320_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            if (((grp_ROUND_fu_320_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            if (((grp_ROUND_fu_320_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            if (((grp_ROUND_fu_320_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            if (((grp_ROUND_fu_320_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            if (((icmp_ln75_fu_404_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end
        end
        ap_ST_fsm_state31 : begin
            if (((1'b1 == ap_CS_fsm_state31) & ((icmp_ln77_1_fu_449_p2 == 1'd1) | (icmp_ln77_reg_846 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state32 : begin
            if (((grp_LOADBYTES_2_fu_338_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state32))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            if (((grp_ROUND_fu_320_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            if (((grp_ROUND_fu_320_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state36))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            if (((grp_ROUND_fu_320_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state38))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            if (((grp_ROUND_fu_320_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state40))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            if (((grp_ROUND_fu_320_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state42))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            if (((grp_ROUND_fu_320_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state44))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state45 : begin
            if (((grp_LOADBYTES_2_fu_338_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state45))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            if (((grp_ROUND_fu_320_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state47))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            if (((grp_ROUND_fu_320_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state49))) begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            if (((grp_ROUND_fu_320_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state51))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            if (((grp_ROUND_fu_320_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state53))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            if (((grp_ROUND_fu_320_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state55))) begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            if (((1'b1 == ap_CS_fsm_state57) & (1'b0 == ap_block_state57_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            if (((1'b1 == ap_CS_fsm_state60) & ((icmp_ln104_1_fu_597_p2 == 1'd1) | (icmp_ln104_reg_877 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end
        end
        ap_ST_fsm_state61 : begin
            if (((grp_LOADBYTES_2_fu_338_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state61))) begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end
        end
        ap_ST_fsm_state62 : begin
            if (((icmp_ln28_fu_652_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state62))) begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end
        end
        ap_ST_fsm_state63 : begin
            if (((grp_ROUND_fu_320_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state63))) begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            if (((grp_ROUND_fu_320_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state65))) begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            if (((grp_ROUND_fu_320_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state67))) begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            if (((grp_ROUND_fu_320_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state69))) begin
                ap_NS_fsm = ap_ST_fsm_state70;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            if (((grp_ROUND_fu_320_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state71))) begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            if (((grp_ROUND_fu_320_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state73))) begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end
        end
        ap_ST_fsm_state74 : begin
            if (((grp_LOADBYTES_2_fu_338_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state74))) begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            if (((1'b1 == ap_CS_fsm_state77) & (1'b0 == ap_block_state77_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            if (((grp_ROUND_fu_320_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state79))) begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            if (((grp_ROUND_fu_320_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state81))) begin
                ap_NS_fsm = ap_ST_fsm_state82;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state81;
            end
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            if (((grp_ROUND_fu_320_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state83))) begin
                ap_NS_fsm = ap_ST_fsm_state84;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state83;
            end
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            if (((grp_ROUND_fu_320_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state85))) begin
                ap_NS_fsm = ap_ST_fsm_state86;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state85;
            end
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            if (((grp_ROUND_fu_320_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state87))) begin
                ap_NS_fsm = ap_ST_fsm_state88;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state87;
            end
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            if (((grp_ROUND_fu_320_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state89))) begin
                ap_NS_fsm = ap_ST_fsm_state90;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state89;
            end
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            if (((grp_ROUND_fu_320_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state91))) begin
                ap_NS_fsm = ap_ST_fsm_state92;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state91;
            end
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            if (((grp_ROUND_fu_320_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state93))) begin
                ap_NS_fsm = ap_ST_fsm_state94;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state93;
            end
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            if (((grp_ROUND_fu_320_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state95))) begin
                ap_NS_fsm = ap_ST_fsm_state96;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state95;
            end
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            if (((grp_ROUND_fu_320_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state97))) begin
                ap_NS_fsm = ap_ST_fsm_state98;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state97;
            end
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            if (((grp_ROUND_fu_320_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state99))) begin
                ap_NS_fsm = ap_ST_fsm_state100;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state99;
            end
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            if (((grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state103))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state103;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ad_address0 = grp_LOADBYTES_2_fu_338_ad_address0;

assign add_ln113_fu_711_p2 = (m_assign_fu_154 + 64'd8);

assign add_ln114_fu_717_p2 = ($signed(mlen_assign_fu_158) + $signed(64'd18446744073709551608));

assign add_ln28_1_fu_658_p2 = (i_reg_289 + 4'd1);

assign add_ln28_fu_700_p2 = (zext_ln28_fu_648_p1 + trunc_ln104_2_fu_696_p1);

assign add_ln84_fu_463_p2 = (ad_assign_fu_146 + 64'd8);

assign add_ln85_fu_469_p2 = ($signed(adlen_assign_fu_150) + $signed(64'd18446744073709551608));

assign and_ln104_1_fu_629_p3 = {{58'd0}, {trunc_ln104_fu_626_p1}};

assign and_ln1_fu_617_p3 = {{tmp_6_fu_608_p4}, {3'd0}};

assign and_ln77_1_fu_506_p3 = {{58'd0}, {trunc_ln77_fu_503_p1}};

assign and_ln_fu_494_p3 = {{tmp_4_fu_485_p4}, {3'd0}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state100 = ap_CS_fsm[32'd99];

assign ap_CS_fsm_state101 = ap_CS_fsm[32'd100];

assign ap_CS_fsm_state102 = ap_CS_fsm[32'd101];

assign ap_CS_fsm_state103 = ap_CS_fsm[32'd102];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd89];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd90];

assign ap_CS_fsm_state92 = ap_CS_fsm[32'd91];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd92];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd93];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd94];

assign ap_CS_fsm_state96 = ap_CS_fsm[32'd95];

assign ap_CS_fsm_state97 = ap_CS_fsm[32'd96];

assign ap_CS_fsm_state98 = ap_CS_fsm[32'd97];

assign ap_CS_fsm_state99 = ap_CS_fsm[32'd98];

always @ (*) begin
    ap_block_state2_on_subcall_done = ((grp_LOADBYTES_1_fu_308_ap_done == 1'b0) | (grp_LOADBYTES_1_fu_300_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state4_on_subcall_done = ((grp_LOADBYTES_1_fu_308_ap_done == 1'b0) | (grp_LOADBYTES_1_fu_300_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state57_on_subcall_done = ((grp_ROUND_fu_320_ap_done == 1'b0) & (icmp_ln75_reg_842 == 1'd0));
end

always @ (*) begin
    ap_block_state77_on_subcall_done = ((grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_ap_done == 1'b0) | (grp_ROUND_fu_320_ap_done == 1'b0));
end

assign clen = (mlen + 64'd16);

assign empty_13_fu_393_p1 = mlen[60:0];

assign empty_fu_389_p1 = adlen[60:0];

assign grp_LOADBYTES_1_fu_300_ap_start = grp_LOADBYTES_1_fu_300_ap_start_reg;

assign grp_LOADBYTES_1_fu_308_ap_start = grp_LOADBYTES_1_fu_308_ap_start_reg;

assign grp_LOADBYTES_2_fu_338_ap_start = grp_LOADBYTES_2_fu_338_ap_start_reg;

assign grp_ROUND_fu_320_ap_start = grp_ROUND_fu_320_ap_start_reg;

assign grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_ap_start = grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_ap_start_reg;

assign grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_ap_start = grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_28_1_fu_349_ap_start_reg;

assign grp_fu_366_p2 = (s_q0 ^ K0_reg_782);

assign grp_fu_372_p2 = (s_q1 ^ K1_reg_800);

assign grp_fu_378_p2 = (s_q1 ^ grp_LOADBYTES_2_fu_338_ap_return);

assign icmp_ln104_1_fu_597_p2 = ((tmp_9_fu_587_p4 == 61'd0) ? 1'b1 : 1'b0);

assign icmp_ln104_fu_569_p2 = ((tmp_8_fu_560_p4 == 61'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_652_p2 = ((i_reg_289 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln75_fu_404_p2 = ((adlen == 64'd0) ? 1'b1 : 1'b0);

assign icmp_ln77_1_fu_449_p2 = ((tmp_7_fu_439_p4 == 61'd0) ? 1'b1 : 1'b0);

assign icmp_ln77_fu_420_p2 = ((tmp_5_fu_410_p4 == 61'd0) ? 1'b1 : 1'b0);

assign k_address0 = grp_LOADBYTES_1_fu_300_k_address0;

assign lshr_ln28_fu_686_p2 = xor_ln105_reg_917 >> zext_ln28_2_fu_682_p1;

assign m_address0 = grp_LOADBYTES_2_fu_338_ad_address0;

assign npub_address0 = grp_LOADBYTES_1_fu_308_k_address0;

assign s_addr_1_reg_794 = 64'd1;

assign s_addr_2_reg_806 = 64'd2;

assign s_addr_3_reg_789 = 64'd3;

assign s_addr_4_reg_812 = 64'd4;

assign s_addr_reg_776 = 64'd0;

assign shl_ln119_fu_752_p2 = 64'd128 << sub_ln119_fu_746_p2;

assign shl_ln1_fu_668_p3 = {{trunc_ln28_fu_664_p1}, {3'd0}};

assign shl_ln2_fu_738_p3 = {{mlen_addr_0_lcssa_reg_267}, {3'd0}};

assign shl_ln89_fu_534_p2 = 64'd128 << sub_ln89_fu_528_p2;

assign shl_ln_fu_520_p3 = {{adlen_addr_0_lcssa_reg_257}, {3'd0}};

assign st_address0 = grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_st_address0;

assign st_ce0 = grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_st_ce0;

assign st_d0 = grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_st_d0;

assign st_we0 = grp_crypto_aead_encrypt_1_Pipeline_VITIS_LOOP_14_1_fu_359_st_we0;

assign sub_ln119_fu_746_p2 = (64'd56 - shl_ln2_fu_738_p3);

assign sub_ln28_fu_676_p2 = ($signed(6'd56) - $signed(shl_ln1_fu_668_p3));

assign sub_ln89_fu_528_p2 = (64'd56 - shl_ln_fu_520_p3);

assign tmp_4_fu_485_p4 = {{adlen[4:3]}};

assign tmp_5_fu_410_p4 = {{adlen[63:3]}};

assign tmp_6_fu_608_p4 = {{mlen[5:3]}};

assign tmp_7_fu_439_p4 = {{adlen_assign_fu_150[63:3]}};

assign tmp_8_fu_560_p4 = {{mlen[63:3]}};

assign tmp_9_fu_587_p4 = {{mlen_assign_fu_158[63:3]}};

assign trunc_ln104_1_fu_603_p1 = m_assign_fu_154[4:0];

assign trunc_ln104_2_fu_696_p1 = m_assign_fu_154[5:0];

assign trunc_ln104_fu_626_p1 = mlen[2:0];

assign trunc_ln117_1_fu_643_p1 = ap_phi_mux_mlen_addr_0_lcssa_phi_fu_270_p4[31:0];

assign trunc_ln117_fu_638_p1 = ap_phi_mux_m_addr_0_lcssa_idx_phi_fu_281_p4[4:0];

assign trunc_ln28_1_fu_691_p1 = lshr_ln28_fu_686_p2[7:0];

assign trunc_ln28_fu_664_p1 = i_reg_289[2:0];

assign trunc_ln77_1_fu_458_p1 = ad_assign_fu_146[4:0];

assign trunc_ln77_fu_503_p1 = adlen[2:0];

assign trunc_ln88_fu_515_p1 = ap_phi_mux_adlen_addr_0_lcssa_phi_fu_260_p4[31:0];

assign xor_ln117_fu_732_p2 = (s_q0 ^ grp_LOADBYTES_2_fu_338_ap_return);

assign xor_ln119_fu_758_p2 = (xor_ln117_fu_732_p2 ^ shl_ln119_fu_752_p2);

assign xor_ln127_fu_765_p2 = (s_load_3_reg_935 ^ K0_reg_782);

assign xor_ln128_fu_770_p2 = (s_q0 ^ K1_reg_800);

assign xor_ln89_1_fu_540_p2 = (shl_ln89_fu_534_p2 ^ grp_LOADBYTES_2_fu_338_ap_return);

assign xor_ln89_fu_546_p2 = (xor_ln89_1_fu_540_p2 ^ s_q1);

assign xor_ln97_fu_553_p2 = (s_q1 ^ 64'd1);

assign zext_ln28_2_fu_682_p1 = sub_ln28_fu_676_p2;

assign zext_ln28_3_fu_706_p1 = add_ln28_fu_700_p2;

assign zext_ln28_fu_648_p1 = i_reg_289;

always @ (posedge ap_clk) begin
    trunc_ln117_reg_906[2:0] <= 3'b000;
    ad_addr_0_lcssa_idx_reg_245[2:0] <= 3'b000;
    m_addr_0_lcssa_idx_reg_277[2:0] <= 3'b000;
end

endmodule //crypto_aead_encrypt_h_crypto_aead_encrypt_1
