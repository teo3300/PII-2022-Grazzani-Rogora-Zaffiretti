// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="crypto_aead_decrypt_c_crypto_aead_decrypt_c,hls_ip_2021_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbv484-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.502167,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=4821,HLS_SYN_LUT=10487,HLS_VERSION=2021_2}" *)

module crypto_aead_decrypt_c (
        ap_local_block,
        ap_local_deadlock,
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_address0,
        m_ce0,
        m_we0,
        m_d0,
        mlen,
        mlen_ap_vld,
        nsec,
        c_address0,
        c_ce0,
        c_q0,
        clen,
        ad_address0,
        ad_ce0,
        ad_q0,
        adlen,
        npub_address0,
        npub_ce0,
        npub_q0,
        k_address0,
        k_ce0,
        k_q0,
        st_address0,
        st_ce0,
        st_we0,
        st_d0,
        st_q0,
        st_address1,
        st_ce1,
        st_we1,
        st_d1,
        st_q1,
        ap_return
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

output   ap_local_block;
output   ap_local_deadlock;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] m_address0;
output   m_ce0;
output   m_we0;
output  [7:0] m_d0;
output  [63:0] mlen;
output   mlen_ap_vld;
input  [7:0] nsec;
output  [5:0] c_address0;
output   c_ce0;
input  [7:0] c_q0;
input  [63:0] clen;
output  [4:0] ad_address0;
output   ad_ce0;
input  [7:0] ad_q0;
input  [63:0] adlen;
output  [3:0] npub_address0;
output   npub_ce0;
input  [7:0] npub_q0;
output  [3:0] k_address0;
output   k_ce0;
input  [7:0] k_q0;
output  [2:0] st_address0;
output   st_ce0;
output   st_we0;
output  [63:0] st_d0;
input  [63:0] st_q0;
output  [2:0] st_address1;
output   st_ce1;
output   st_we1;
output  [63:0] st_d1;
input  [63:0] st_q1;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    grp_crypto_aead_decrypt_1_fu_54_ap_start;
wire    grp_crypto_aead_decrypt_1_fu_54_ap_done;
wire    grp_crypto_aead_decrypt_1_fu_54_ap_idle;
wire    grp_crypto_aead_decrypt_1_fu_54_ap_ready;
wire   [4:0] grp_crypto_aead_decrypt_1_fu_54_m_address0;
wire    grp_crypto_aead_decrypt_1_fu_54_m_ce0;
wire    grp_crypto_aead_decrypt_1_fu_54_m_we0;
wire   [7:0] grp_crypto_aead_decrypt_1_fu_54_m_d0;
wire   [63:0] grp_crypto_aead_decrypt_1_fu_54_mlen;
wire    grp_crypto_aead_decrypt_1_fu_54_mlen_ap_vld;
wire   [5:0] grp_crypto_aead_decrypt_1_fu_54_c_address0;
wire    grp_crypto_aead_decrypt_1_fu_54_c_ce0;
wire   [4:0] grp_crypto_aead_decrypt_1_fu_54_ad_address0;
wire    grp_crypto_aead_decrypt_1_fu_54_ad_ce0;
wire   [3:0] grp_crypto_aead_decrypt_1_fu_54_npub_address0;
wire    grp_crypto_aead_decrypt_1_fu_54_npub_ce0;
wire   [3:0] grp_crypto_aead_decrypt_1_fu_54_k_address0;
wire    grp_crypto_aead_decrypt_1_fu_54_k_ce0;
wire   [0:0] grp_crypto_aead_decrypt_1_fu_54_ap_return;
reg    grp_crypto_aead_decrypt_1_fu_54_ap_start_reg;
wire    ap_CS_fsm_state2;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 grp_crypto_aead_decrypt_1_fu_54_ap_start_reg = 1'b0;
end

crypto_aead_decrypt_c_crypto_aead_decrypt_1 grp_crypto_aead_decrypt_1_fu_54(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_crypto_aead_decrypt_1_fu_54_ap_start),
    .ap_done(grp_crypto_aead_decrypt_1_fu_54_ap_done),
    .ap_idle(grp_crypto_aead_decrypt_1_fu_54_ap_idle),
    .ap_ready(grp_crypto_aead_decrypt_1_fu_54_ap_ready),
    .m_address0(grp_crypto_aead_decrypt_1_fu_54_m_address0),
    .m_ce0(grp_crypto_aead_decrypt_1_fu_54_m_ce0),
    .m_we0(grp_crypto_aead_decrypt_1_fu_54_m_we0),
    .m_d0(grp_crypto_aead_decrypt_1_fu_54_m_d0),
    .mlen(grp_crypto_aead_decrypt_1_fu_54_mlen),
    .mlen_ap_vld(grp_crypto_aead_decrypt_1_fu_54_mlen_ap_vld),
    .c_address0(grp_crypto_aead_decrypt_1_fu_54_c_address0),
    .c_ce0(grp_crypto_aead_decrypt_1_fu_54_c_ce0),
    .c_q0(c_q0),
    .clen(clen),
    .ad_address0(grp_crypto_aead_decrypt_1_fu_54_ad_address0),
    .ad_ce0(grp_crypto_aead_decrypt_1_fu_54_ad_ce0),
    .ad_q0(ad_q0),
    .adlen(adlen),
    .npub_address0(grp_crypto_aead_decrypt_1_fu_54_npub_address0),
    .npub_ce0(grp_crypto_aead_decrypt_1_fu_54_npub_ce0),
    .npub_q0(npub_q0),
    .k_address0(grp_crypto_aead_decrypt_1_fu_54_k_address0),
    .k_ce0(grp_crypto_aead_decrypt_1_fu_54_k_ce0),
    .k_q0(k_q0),
    .ap_return(grp_crypto_aead_decrypt_1_fu_54_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_crypto_aead_decrypt_1_fu_54_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_crypto_aead_decrypt_1_fu_54_ap_start_reg <= 1'b1;
        end else if ((grp_crypto_aead_decrypt_1_fu_54_ap_ready == 1'b1)) begin
            grp_crypto_aead_decrypt_1_fu_54_ap_start_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_crypto_aead_decrypt_1_fu_54_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if (((grp_crypto_aead_decrypt_1_fu_54_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_crypto_aead_decrypt_1_fu_54_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_crypto_aead_decrypt_1_fu_54_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ad_address0 = grp_crypto_aead_decrypt_1_fu_54_ad_address0;

assign ad_ce0 = grp_crypto_aead_decrypt_1_fu_54_ad_ce0;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_local_block = 1'b0;

assign ap_local_deadlock = 1'b0;

assign ap_return = ((grp_crypto_aead_decrypt_1_fu_54_ap_return[0:0] == 1'b1) ? 32'd4294967295 : 32'd0);

assign c_address0 = grp_crypto_aead_decrypt_1_fu_54_c_address0;

assign c_ce0 = grp_crypto_aead_decrypt_1_fu_54_c_ce0;

assign grp_crypto_aead_decrypt_1_fu_54_ap_start = grp_crypto_aead_decrypt_1_fu_54_ap_start_reg;

assign k_address0 = grp_crypto_aead_decrypt_1_fu_54_k_address0;

assign k_ce0 = grp_crypto_aead_decrypt_1_fu_54_k_ce0;

assign m_address0 = grp_crypto_aead_decrypt_1_fu_54_m_address0;

assign m_ce0 = grp_crypto_aead_decrypt_1_fu_54_m_ce0;

assign m_d0 = grp_crypto_aead_decrypt_1_fu_54_m_d0;

assign m_we0 = grp_crypto_aead_decrypt_1_fu_54_m_we0;

assign mlen = grp_crypto_aead_decrypt_1_fu_54_mlen;

assign mlen_ap_vld = grp_crypto_aead_decrypt_1_fu_54_mlen_ap_vld;

assign npub_address0 = grp_crypto_aead_decrypt_1_fu_54_npub_address0;

assign npub_ce0 = grp_crypto_aead_decrypt_1_fu_54_npub_ce0;

assign st_address0 = 3'd0;

assign st_address1 = 3'd0;

assign st_ce0 = 1'b0;

assign st_ce1 = 1'b0;

assign st_d0 = 64'd0;

assign st_d1 = 64'd0;

assign st_we0 = 1'b0;

assign st_we1 = 1'b0;

endmodule //crypto_aead_decrypt_c
