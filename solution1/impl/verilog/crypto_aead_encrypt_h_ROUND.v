// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module crypto_aead_encrypt_h_ROUND (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        s_address0,
        s_ce0,
        s_we0,
        s_d0,
        s_q0,
        s_address1,
        s_ce1,
        s_we1,
        s_d1,
        s_q1,
        C
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] s_address0;
output   s_ce0;
output   s_we0;
output  [63:0] s_d0;
input  [63:0] s_q0;
output  [2:0] s_address1;
output   s_ce1;
output   s_we1;
output  [63:0] s_d1;
input  [63:0] s_q1;
input  [7:0] C;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[2:0] s_address0;
reg s_ce0;
reg s_we0;
reg[63:0] s_d0;
reg[2:0] s_address1;
reg s_ce1;
reg s_we1;
reg[63:0] s_d1;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] s_addr_5_reg_559;
wire   [2:0] s_addr_reg_564;
wire    ap_CS_fsm_state2;
reg   [63:0] s_load_reg_569;
wire   [2:0] s_addr_6_reg_574;
reg   [63:0] s_load_8_reg_579;
wire    ap_CS_fsm_state3;
reg   [63:0] s_load_9_reg_586;
wire   [2:0] s_addr_8_reg_597;
wire   [63:0] t_1_fu_205_p2;
reg   [63:0] t_1_reg_602;
wire    ap_CS_fsm_state4;
wire   [63:0] xor_ln36_1_fu_435_p2;
reg   [63:0] xor_ln36_1_reg_607;
wire   [63:0] xor_ln37_1_fu_491_p2;
reg   [63:0] xor_ln37_1_reg_612;
wire   [63:0] xor_ln33_1_fu_321_p2;
wire   [63:0] xor_ln34_1_fu_378_p2;
wire    ap_CS_fsm_state5;
wire   [63:0] xor_ln35_1_fu_552_p2;
wire    ap_CS_fsm_state6;
wire   [63:0] zext_ln14_fu_140_p1;
wire   [63:0] xor_ln14_fu_144_p2;
wire   [63:0] xor_ln21_fu_164_p2;
wire   [63:0] and_ln21_fu_170_p2;
wire   [63:0] xor_ln17_fu_149_p2;
wire   [63:0] xor_ln19_fu_158_p2;
wire   [63:0] xor_ln22_fu_182_p2;
wire   [63:0] xor_ln23_fu_194_p2;
wire   [63:0] and_ln23_fu_200_p2;
wire   [63:0] xor_ln18_fu_153_p2;
wire   [63:0] xor_ln24_fu_211_p2;
wire   [63:0] xor_ln25_fu_223_p2;
wire   [63:0] and_ln25_fu_229_p2;
wire   [63:0] and_ln22_fu_188_p2;
wire   [63:0] t_fu_176_p2;
wire   [63:0] xor_ln27_fu_241_p2;
wire   [63:0] t_2_fu_235_p2;
wire   [63:0] and_ln24_fu_217_p2;
wire   [63:0] xor_ln29_fu_259_p2;
wire   [63:0] t_4_fu_253_p2;
wire   [18:0] trunc_ln8_fu_281_p1;
wire   [44:0] lshr_ln8_fu_271_p4;
wire   [27:0] trunc_ln8_1_fu_303_p1;
wire   [35:0] lshr_ln8_1_fu_293_p4;
wire   [63:0] or_ln8_1_fu_307_p3;
wire   [63:0] xor_ln33_fu_315_p2;
wire   [63:0] or_ln8_fu_285_p3;
wire   [63:0] t_3_fu_247_p2;
wire   [60:0] trunc_ln8_2_fu_338_p1;
wire   [2:0] lshr_ln8_2_fu_328_p4;
wire   [38:0] trunc_ln8_3_fu_360_p1;
wire   [24:0] lshr_ln8_3_fu_350_p4;
wire   [63:0] or_ln8_3_fu_364_p3;
wire   [63:0] xor_ln34_fu_372_p2;
wire   [63:0] or_ln8_2_fu_342_p3;
wire   [63:0] t_5_fu_265_p2;
wire   [9:0] trunc_ln8_6_fu_395_p1;
wire   [53:0] lshr_ln8_6_fu_385_p4;
wire   [16:0] trunc_ln8_7_fu_417_p1;
wire   [46:0] lshr_ln8_7_fu_407_p4;
wire   [63:0] or_ln8_7_fu_421_p3;
wire   [63:0] xor_ln36_fu_429_p2;
wire   [63:0] or_ln8_6_fu_399_p3;
wire   [6:0] trunc_ln8_8_fu_451_p1;
wire   [56:0] lshr_ln8_8_fu_441_p4;
wire   [40:0] trunc_ln8_9_fu_473_p1;
wire   [22:0] lshr_ln8_9_fu_463_p4;
wire   [63:0] or_ln8_9_fu_477_p3;
wire   [63:0] xor_ln37_fu_485_p2;
wire   [63:0] or_ln8_8_fu_455_p3;
wire   [63:0] t_6_fu_497_p2;
wire   [0:0] trunc_ln8_4_fu_512_p1;
wire   [62:0] lshr_ln8_4_fu_502_p4;
wire   [5:0] trunc_ln8_5_fu_534_p1;
wire   [57:0] lshr_ln8_5_fu_524_p4;
wire   [63:0] or_ln8_5_fu_538_p3;
wire   [63:0] xor_ln35_fu_546_p2;
wire   [63:0] or_ln8_4_fu_516_p3;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        s_load_8_reg_579 <= s_q1;
        s_load_9_reg_586 <= s_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        s_load_reg_569 <= s_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        t_1_reg_602 <= t_1_fu_205_p2;
        xor_ln36_1_reg_607 <= xor_ln36_1_fu_435_p2;
        xor_ln37_1_reg_612 <= xor_ln37_1_fu_491_p2;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        s_address0 = s_addr_5_reg_559;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        s_address0 = s_addr_reg_564;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        s_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        s_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        s_address0 = 64'd2;
    end else begin
        s_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        s_address1 = s_addr_6_reg_574;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        s_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        s_address1 = s_addr_8_reg_597;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        s_address1 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        s_address1 = 64'd4;
    end else begin
        s_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        s_ce0 = 1'b1;
    end else begin
        s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6))) begin
        s_ce1 = 1'b1;
    end else begin
        s_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        s_d0 = xor_ln35_1_fu_552_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        s_d0 = xor_ln33_1_fu_321_p2;
    end else begin
        s_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        s_d1 = xor_ln37_1_reg_612;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        s_d1 = xor_ln36_1_reg_607;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        s_d1 = xor_ln34_1_fu_378_p2;
    end else begin
        s_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        s_we0 = 1'b1;
    end else begin
        s_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6))) begin
        s_we1 = 1'b1;
    end else begin
        s_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln21_fu_170_p2 = (xor_ln21_fu_164_p2 & xor_ln14_fu_144_p2);

assign and_ln22_fu_188_p2 = (xor_ln22_fu_182_p2 & s_q0);

assign and_ln23_fu_200_p2 = (xor_ln23_fu_194_p2 & s_load_8_reg_579);

assign and_ln24_fu_217_p2 = (xor_ln24_fu_211_p2 & xor_ln17_fu_149_p2);

assign and_ln25_fu_229_p2 = (xor_ln25_fu_223_p2 & s_q1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign lshr_ln8_1_fu_293_p4 = {{t_4_fu_253_p2[63:28]}};

assign lshr_ln8_2_fu_328_p4 = {{t_3_fu_247_p2[63:61]}};

assign lshr_ln8_3_fu_350_p4 = {{t_3_fu_247_p2[63:39]}};

assign lshr_ln8_4_fu_502_p4 = {{t_6_fu_497_p2[63:1]}};

assign lshr_ln8_5_fu_524_p4 = {{t_6_fu_497_p2[63:6]}};

assign lshr_ln8_6_fu_385_p4 = {{t_5_fu_265_p2[63:10]}};

assign lshr_ln8_7_fu_407_p4 = {{t_5_fu_265_p2[63:17]}};

assign lshr_ln8_8_fu_441_p4 = {{t_2_fu_235_p2[63:7]}};

assign lshr_ln8_9_fu_463_p4 = {{t_2_fu_235_p2[63:41]}};

assign lshr_ln8_fu_271_p4 = {{t_4_fu_253_p2[63:19]}};

assign or_ln8_1_fu_307_p3 = {{trunc_ln8_1_fu_303_p1}, {lshr_ln8_1_fu_293_p4}};

assign or_ln8_2_fu_342_p3 = {{trunc_ln8_2_fu_338_p1}, {lshr_ln8_2_fu_328_p4}};

assign or_ln8_3_fu_364_p3 = {{trunc_ln8_3_fu_360_p1}, {lshr_ln8_3_fu_350_p4}};

assign or_ln8_4_fu_516_p3 = {{trunc_ln8_4_fu_512_p1}, {lshr_ln8_4_fu_502_p4}};

assign or_ln8_5_fu_538_p3 = {{trunc_ln8_5_fu_534_p1}, {lshr_ln8_5_fu_524_p4}};

assign or_ln8_6_fu_399_p3 = {{trunc_ln8_6_fu_395_p1}, {lshr_ln8_6_fu_385_p4}};

assign or_ln8_7_fu_421_p3 = {{trunc_ln8_7_fu_417_p1}, {lshr_ln8_7_fu_407_p4}};

assign or_ln8_8_fu_455_p3 = {{trunc_ln8_8_fu_451_p1}, {lshr_ln8_8_fu_441_p4}};

assign or_ln8_9_fu_477_p3 = {{trunc_ln8_9_fu_473_p1}, {lshr_ln8_9_fu_463_p4}};

assign or_ln8_fu_285_p3 = {{trunc_ln8_fu_281_p1}, {lshr_ln8_fu_271_p4}};

assign s_addr_5_reg_559 = 64'd2;

assign s_addr_6_reg_574 = 64'd4;

assign s_addr_8_reg_597 = 64'd1;

assign s_addr_reg_564 = 64'd0;

assign t_1_fu_205_p2 = (xor_ln19_fu_158_p2 ^ and_ln23_fu_200_p2);

assign t_2_fu_235_p2 = (xor_ln18_fu_153_p2 ^ and_ln25_fu_229_p2);

assign t_3_fu_247_p2 = (xor_ln27_fu_241_p2 ^ s_q1);

assign t_4_fu_253_p2 = (t_fu_176_p2 ^ t_2_fu_235_p2);

assign t_5_fu_265_p2 = (xor_ln29_fu_259_p2 ^ s_q0);

assign t_6_fu_497_p2 = (t_1_reg_602 ^ 64'd18446744073709551615);

assign t_fu_176_p2 = (xor_ln17_fu_149_p2 ^ and_ln21_fu_170_p2);

assign trunc_ln8_1_fu_303_p1 = t_4_fu_253_p2[27:0];

assign trunc_ln8_2_fu_338_p1 = t_3_fu_247_p2[60:0];

assign trunc_ln8_3_fu_360_p1 = t_3_fu_247_p2[38:0];

assign trunc_ln8_4_fu_512_p1 = t_6_fu_497_p2[0:0];

assign trunc_ln8_5_fu_534_p1 = t_6_fu_497_p2[5:0];

assign trunc_ln8_6_fu_395_p1 = t_5_fu_265_p2[9:0];

assign trunc_ln8_7_fu_417_p1 = t_5_fu_265_p2[16:0];

assign trunc_ln8_8_fu_451_p1 = t_2_fu_235_p2[6:0];

assign trunc_ln8_9_fu_473_p1 = t_2_fu_235_p2[40:0];

assign trunc_ln8_fu_281_p1 = t_4_fu_253_p2[18:0];

assign xor_ln14_fu_144_p2 = (zext_ln14_fu_140_p1 ^ s_load_reg_569);

assign xor_ln17_fu_149_p2 = (s_load_9_reg_586 ^ s_load_8_reg_579);

assign xor_ln18_fu_153_p2 = (s_q0 ^ s_load_8_reg_579);

assign xor_ln19_fu_158_p2 = (xor_ln14_fu_144_p2 ^ s_q1);

assign xor_ln21_fu_164_p2 = (s_q1 ^ 64'd18446744073709551615);

assign xor_ln22_fu_182_p2 = (xor_ln19_fu_158_p2 ^ 64'd18446744073709551615);

assign xor_ln23_fu_194_p2 = (s_q0 ^ 64'd18446744073709551615);

assign xor_ln24_fu_211_p2 = (xor_ln18_fu_153_p2 ^ 64'd18446744073709551615);

assign xor_ln25_fu_223_p2 = (xor_ln17_fu_149_p2 ^ 64'd18446744073709551615);

assign xor_ln27_fu_241_p2 = (t_fu_176_p2 ^ and_ln22_fu_188_p2);

assign xor_ln29_fu_259_p2 = (t_1_fu_205_p2 ^ and_ln24_fu_217_p2);

assign xor_ln33_1_fu_321_p2 = (xor_ln33_fu_315_p2 ^ or_ln8_fu_285_p3);

assign xor_ln33_fu_315_p2 = (t_4_fu_253_p2 ^ or_ln8_1_fu_307_p3);

assign xor_ln34_1_fu_378_p2 = (xor_ln34_fu_372_p2 ^ or_ln8_2_fu_342_p3);

assign xor_ln34_fu_372_p2 = (t_3_fu_247_p2 ^ or_ln8_3_fu_364_p3);

assign xor_ln35_1_fu_552_p2 = (xor_ln35_fu_546_p2 ^ or_ln8_4_fu_516_p3);

assign xor_ln35_fu_546_p2 = (t_6_fu_497_p2 ^ or_ln8_5_fu_538_p3);

assign xor_ln36_1_fu_435_p2 = (xor_ln36_fu_429_p2 ^ or_ln8_6_fu_399_p3);

assign xor_ln36_fu_429_p2 = (t_5_fu_265_p2 ^ or_ln8_7_fu_421_p3);

assign xor_ln37_1_fu_491_p2 = (xor_ln37_fu_485_p2 ^ or_ln8_8_fu_455_p3);

assign xor_ln37_fu_485_p2 = (t_2_fu_235_p2 ^ or_ln8_9_fu_477_p3);

assign zext_ln14_fu_140_p1 = C;

endmodule //crypto_aead_encrypt_h_ROUND
