// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module crypto_aead_decrypt_c_crypto_aead_decrypt_1_Pipeline_VITIS_LOOP_28_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        trunc_ln28_5,
        xor_ln250,
        trunc_ln249_1,
        m_address0,
        m_ce0,
        m_we0,
        m_d0
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [30:0] trunc_ln28_5;
input  [63:0] xor_ln250;
input  [4:0] trunc_ln249_1;
output  [4:0] m_address0;
output   m_ce0;
output   m_we0;
output  [7:0] m_d0;

reg ap_idle;
reg m_ce0;
reg m_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln28_fu_95_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] zext_ln28_fu_150_p1;
reg   [30:0] i_1_fu_52;
wire   [30:0] add_ln28_fu_101_p2;
wire    ap_loop_init;
reg   [30:0] ap_sig_allocacmp_i;
wire   [28:0] trunc_ln28_fu_111_p1;
wire   [31:0] shl_ln28_1_fu_115_p3;
wire   [31:0] sub_ln28_fu_123_p2;
wire   [63:0] zext_ln28_1_fu_129_p1;
wire   [63:0] lshr_ln28_fu_133_p2;
wire   [4:0] empty_18_fu_107_p1;
wire   [4:0] add_ln28_1_fu_144_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

crypto_aead_decrypt_c_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if ((icmp_ln28_fu_95_p2 == 1'd0)) begin
            i_1_fu_52 <= add_ln28_fu_101_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_1_fu_52 <= 31'd0;
        end
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln28_fu_95_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i = 31'd0;
    end else begin
        ap_sig_allocacmp_i = i_1_fu_52;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        m_ce0 = 1'b1;
    end else begin
        m_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln28_fu_95_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        m_we0 = 1'b1;
    end else begin
        m_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln28_1_fu_144_p2 = (empty_18_fu_107_p1 + trunc_ln249_1);

assign add_ln28_fu_101_p2 = (ap_sig_allocacmp_i + 31'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_18_fu_107_p1 = ap_sig_allocacmp_i[4:0];

assign icmp_ln28_fu_95_p2 = ((ap_sig_allocacmp_i == trunc_ln28_5) ? 1'b1 : 1'b0);

assign lshr_ln28_fu_133_p2 = xor_ln250 >> zext_ln28_1_fu_129_p1;

assign m_address0 = zext_ln28_fu_150_p1;

assign m_d0 = lshr_ln28_fu_133_p2[7:0];

assign shl_ln28_1_fu_115_p3 = {{trunc_ln28_fu_111_p1}, {3'd0}};

assign sub_ln28_fu_123_p2 = (32'd56 - shl_ln28_1_fu_115_p3);

assign trunc_ln28_fu_111_p1 = ap_sig_allocacmp_i[28:0];

assign zext_ln28_1_fu_129_p1 = sub_ln28_fu_123_p2;

assign zext_ln28_fu_150_p1 = add_ln28_1_fu_144_p2;

endmodule //crypto_aead_decrypt_c_crypto_aead_decrypt_1_Pipeline_VITIS_LOOP_28_1
