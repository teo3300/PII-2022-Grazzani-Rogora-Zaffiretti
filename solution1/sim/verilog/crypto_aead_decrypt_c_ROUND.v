// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module crypto_aead_decrypt_c_ROUND (
        ap_ready,
        s_0_read,
        s_1_read,
        s_2_read,
        s_3_read,
        s_4_read,
        C,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4
);


output   ap_ready;
input  [63:0] s_0_read;
input  [63:0] s_1_read;
input  [63:0] s_2_read;
input  [63:0] s_3_read;
input  [63:0] s_4_read;
input  [7:0] C;
output  [63:0] ap_return_0;
output  [63:0] ap_return_1;
output  [63:0] ap_return_2;
output  [63:0] ap_return_3;
output  [63:0] ap_return_4;

wire   [63:0] zext_ln14_fu_118_p1;
wire   [63:0] xor_ln14_fu_122_p2;
wire   [63:0] xor_ln21_fu_146_p2;
wire   [63:0] and_ln21_fu_152_p2;
wire   [63:0] xor_ln17_fu_128_p2;
wire   [63:0] xor_ln19_fu_140_p2;
wire   [63:0] xor_ln22_fu_164_p2;
wire   [63:0] xor_ln23_fu_176_p2;
wire   [63:0] and_ln23_fu_182_p2;
wire   [63:0] xor_ln18_fu_134_p2;
wire   [63:0] xor_ln24_fu_194_p2;
wire   [63:0] xor_ln25_fu_206_p2;
wire   [63:0] and_ln25_fu_212_p2;
wire   [63:0] t_fu_158_p2;
wire   [63:0] xor_ln27_fu_224_p2;
wire   [63:0] and_ln22_fu_170_p2;
wire   [63:0] t_2_fu_218_p2;
wire   [63:0] t_1_fu_188_p2;
wire   [63:0] xor_ln29_fu_242_p2;
wire   [63:0] and_ln24_fu_200_p2;
wire   [63:0] t_4_fu_236_p2;
wire   [18:0] trunc_ln8_fu_270_p1;
wire   [44:0] lshr_ln8_fu_260_p4;
wire   [27:0] trunc_ln8_1_fu_292_p1;
wire   [35:0] lshr_ln8_1_fu_282_p4;
wire   [63:0] or_ln8_1_fu_296_p3;
wire   [63:0] xor_ln33_fu_304_p2;
wire   [63:0] or_ln8_fu_274_p3;
wire   [63:0] t_3_fu_230_p2;
wire   [60:0] trunc_ln8_2_fu_326_p1;
wire   [2:0] lshr_ln8_2_fu_316_p4;
wire   [38:0] trunc_ln8_3_fu_348_p1;
wire   [24:0] lshr_ln8_3_fu_338_p4;
wire   [63:0] or_ln8_3_fu_352_p3;
wire   [63:0] xor_ln34_fu_360_p2;
wire   [63:0] or_ln8_2_fu_330_p3;
wire   [63:0] t_6_fu_254_p2;
wire   [0:0] trunc_ln8_4_fu_382_p1;
wire   [62:0] lshr_ln8_4_fu_372_p4;
wire   [5:0] trunc_ln8_5_fu_404_p1;
wire   [57:0] lshr_ln8_5_fu_394_p4;
wire   [63:0] or_ln8_5_fu_408_p3;
wire   [63:0] xor_ln35_fu_416_p2;
wire   [63:0] or_ln8_4_fu_386_p3;
wire   [63:0] t_5_fu_248_p2;
wire   [9:0] trunc_ln8_6_fu_438_p1;
wire   [53:0] lshr_ln8_6_fu_428_p4;
wire   [16:0] trunc_ln8_7_fu_460_p1;
wire   [46:0] lshr_ln8_7_fu_450_p4;
wire   [63:0] or_ln8_7_fu_464_p3;
wire   [63:0] xor_ln36_fu_472_p2;
wire   [63:0] or_ln8_6_fu_442_p3;
wire   [6:0] trunc_ln8_8_fu_494_p1;
wire   [56:0] lshr_ln8_8_fu_484_p4;
wire   [40:0] trunc_ln8_9_fu_516_p1;
wire   [22:0] lshr_ln8_9_fu_506_p4;
wire   [63:0] or_ln8_9_fu_520_p3;
wire   [63:0] xor_ln37_fu_528_p2;
wire   [63:0] or_ln8_8_fu_498_p3;
wire   [63:0] xor_ln33_1_fu_310_p2;
wire   [63:0] xor_ln34_1_fu_366_p2;
wire   [63:0] xor_ln35_1_fu_422_p2;
wire   [63:0] xor_ln36_1_fu_478_p2;
wire   [63:0] xor_ln37_1_fu_534_p2;

assign and_ln21_fu_152_p2 = (xor_ln21_fu_146_p2 & xor_ln14_fu_122_p2);

assign and_ln22_fu_170_p2 = (xor_ln22_fu_164_p2 & s_3_read);

assign and_ln23_fu_182_p2 = (xor_ln23_fu_176_p2 & s_4_read);

assign and_ln24_fu_200_p2 = (xor_ln24_fu_194_p2 & xor_ln17_fu_128_p2);

assign and_ln25_fu_212_p2 = (xor_ln25_fu_206_p2 & s_1_read);

assign ap_ready = 1'b1;

assign ap_return_0 = xor_ln33_1_fu_310_p2;

assign ap_return_1 = xor_ln34_1_fu_366_p2;

assign ap_return_2 = xor_ln35_1_fu_422_p2;

assign ap_return_3 = xor_ln36_1_fu_478_p2;

assign ap_return_4 = xor_ln37_1_fu_534_p2;

assign lshr_ln8_1_fu_282_p4 = {{t_4_fu_236_p2[63:28]}};

assign lshr_ln8_2_fu_316_p4 = {{t_3_fu_230_p2[63:61]}};

assign lshr_ln8_3_fu_338_p4 = {{t_3_fu_230_p2[63:39]}};

assign lshr_ln8_4_fu_372_p4 = {{t_6_fu_254_p2[63:1]}};

assign lshr_ln8_5_fu_394_p4 = {{t_6_fu_254_p2[63:6]}};

assign lshr_ln8_6_fu_428_p4 = {{t_5_fu_248_p2[63:10]}};

assign lshr_ln8_7_fu_450_p4 = {{t_5_fu_248_p2[63:17]}};

assign lshr_ln8_8_fu_484_p4 = {{t_2_fu_218_p2[63:7]}};

assign lshr_ln8_9_fu_506_p4 = {{t_2_fu_218_p2[63:41]}};

assign lshr_ln8_fu_260_p4 = {{t_4_fu_236_p2[63:19]}};

assign or_ln8_1_fu_296_p3 = {{trunc_ln8_1_fu_292_p1}, {lshr_ln8_1_fu_282_p4}};

assign or_ln8_2_fu_330_p3 = {{trunc_ln8_2_fu_326_p1}, {lshr_ln8_2_fu_316_p4}};

assign or_ln8_3_fu_352_p3 = {{trunc_ln8_3_fu_348_p1}, {lshr_ln8_3_fu_338_p4}};

assign or_ln8_4_fu_386_p3 = {{trunc_ln8_4_fu_382_p1}, {lshr_ln8_4_fu_372_p4}};

assign or_ln8_5_fu_408_p3 = {{trunc_ln8_5_fu_404_p1}, {lshr_ln8_5_fu_394_p4}};

assign or_ln8_6_fu_442_p3 = {{trunc_ln8_6_fu_438_p1}, {lshr_ln8_6_fu_428_p4}};

assign or_ln8_7_fu_464_p3 = {{trunc_ln8_7_fu_460_p1}, {lshr_ln8_7_fu_450_p4}};

assign or_ln8_8_fu_498_p3 = {{trunc_ln8_8_fu_494_p1}, {lshr_ln8_8_fu_484_p4}};

assign or_ln8_9_fu_520_p3 = {{trunc_ln8_9_fu_516_p1}, {lshr_ln8_9_fu_506_p4}};

assign or_ln8_fu_274_p3 = {{trunc_ln8_fu_270_p1}, {lshr_ln8_fu_260_p4}};

assign t_1_fu_188_p2 = (xor_ln19_fu_140_p2 ^ and_ln23_fu_182_p2);

assign t_2_fu_218_p2 = (xor_ln18_fu_134_p2 ^ and_ln25_fu_212_p2);

assign t_3_fu_230_p2 = (xor_ln27_fu_224_p2 ^ and_ln22_fu_170_p2);

assign t_4_fu_236_p2 = (t_fu_158_p2 ^ t_2_fu_218_p2);

assign t_5_fu_248_p2 = (xor_ln29_fu_242_p2 ^ and_ln24_fu_200_p2);

assign t_6_fu_254_p2 = (t_1_fu_188_p2 ^ 64'd18446744073709551615);

assign t_fu_158_p2 = (xor_ln17_fu_128_p2 ^ and_ln21_fu_152_p2);

assign trunc_ln8_1_fu_292_p1 = t_4_fu_236_p2[27:0];

assign trunc_ln8_2_fu_326_p1 = t_3_fu_230_p2[60:0];

assign trunc_ln8_3_fu_348_p1 = t_3_fu_230_p2[38:0];

assign trunc_ln8_4_fu_382_p1 = t_6_fu_254_p2[0:0];

assign trunc_ln8_5_fu_404_p1 = t_6_fu_254_p2[5:0];

assign trunc_ln8_6_fu_438_p1 = t_5_fu_248_p2[9:0];

assign trunc_ln8_7_fu_460_p1 = t_5_fu_248_p2[16:0];

assign trunc_ln8_8_fu_494_p1 = t_2_fu_218_p2[6:0];

assign trunc_ln8_9_fu_516_p1 = t_2_fu_218_p2[40:0];

assign trunc_ln8_fu_270_p1 = t_4_fu_236_p2[18:0];

assign xor_ln14_fu_122_p2 = (zext_ln14_fu_118_p1 ^ s_2_read);

assign xor_ln17_fu_128_p2 = (s_4_read ^ s_0_read);

assign xor_ln18_fu_134_p2 = (s_4_read ^ s_3_read);

assign xor_ln19_fu_140_p2 = (xor_ln14_fu_122_p2 ^ s_1_read);

assign xor_ln21_fu_146_p2 = (s_1_read ^ 64'd18446744073709551615);

assign xor_ln22_fu_164_p2 = (xor_ln19_fu_140_p2 ^ 64'd18446744073709551615);

assign xor_ln23_fu_176_p2 = (s_3_read ^ 64'd18446744073709551615);

assign xor_ln24_fu_194_p2 = (xor_ln18_fu_134_p2 ^ 64'd18446744073709551615);

assign xor_ln25_fu_206_p2 = (xor_ln17_fu_128_p2 ^ 64'd18446744073709551615);

assign xor_ln27_fu_224_p2 = (t_fu_158_p2 ^ s_1_read);

assign xor_ln29_fu_242_p2 = (t_1_fu_188_p2 ^ s_3_read);

assign xor_ln33_1_fu_310_p2 = (xor_ln33_fu_304_p2 ^ or_ln8_fu_274_p3);

assign xor_ln33_fu_304_p2 = (t_4_fu_236_p2 ^ or_ln8_1_fu_296_p3);

assign xor_ln34_1_fu_366_p2 = (xor_ln34_fu_360_p2 ^ or_ln8_2_fu_330_p3);

assign xor_ln34_fu_360_p2 = (t_3_fu_230_p2 ^ or_ln8_3_fu_352_p3);

assign xor_ln35_1_fu_422_p2 = (xor_ln35_fu_416_p2 ^ or_ln8_4_fu_386_p3);

assign xor_ln35_fu_416_p2 = (t_6_fu_254_p2 ^ or_ln8_5_fu_408_p3);

assign xor_ln36_1_fu_478_p2 = (xor_ln36_fu_472_p2 ^ or_ln8_6_fu_442_p3);

assign xor_ln36_fu_472_p2 = (t_5_fu_248_p2 ^ or_ln8_7_fu_464_p3);

assign xor_ln37_1_fu_534_p2 = (xor_ln37_fu_528_p2 ^ or_ln8_8_fu_498_p3);

assign xor_ln37_fu_528_p2 = (t_2_fu_218_p2 ^ or_ln8_9_fu_520_p3);

assign zext_ln14_fu_118_p1 = C;

endmodule //crypto_aead_decrypt_c_ROUND
